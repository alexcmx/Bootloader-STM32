
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c70  08004c70  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004c70  08004c70  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c70  08004c70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000ec  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000015c  2000015c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afcd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ec3  00000000  00000000  0002b06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  0002cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007d8  00000000  00000000  0002d7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239bc  00000000  00000000  0002df98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6ba  00000000  00000000  00051954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c54b9  00000000  00000000  0005e00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001234c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b94  00000000  00000000  00123518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004aec 	.word	0x08004aec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004aec 	.word	0x08004aec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <_Z6gencrcPvj>:
	uint8_t crc;
};


uint8_t gencrc(void *data, size_t len)
{
 8000280:	b480      	push	{r7}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xff;
 800028a:	23ff      	movs	r3, #255	; 0xff
 800028c:	75fb      	strb	r3, [r7, #23]
    size_t i, j;
    for (i = 0; i < len; i++) {
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	693a      	ldr	r2, [r7, #16]
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	429a      	cmp	r2, r3
 8000298:	d222      	bcs.n	80002e0 <_Z6gencrcPvj+0x60>
        crc ^= ((uint8_t *)data)[i];
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	4413      	add	r3, r2
 80002a0:	781a      	ldrb	r2, [r3, #0]
 80002a2:	7dfb      	ldrb	r3, [r7, #23]
 80002a4:	4053      	eors	r3, r2
 80002a6:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < 8; j++) {
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	d812      	bhi.n	80002d8 <_Z6gencrcPvj+0x58>
            if ((crc & 0x80) != 0)
 80002b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	da07      	bge.n	80002ca <_Z6gencrcPvj+0x4a>
                crc = (uint8_t)((crc << 1) ^ 0x31);
 80002ba:	7dfb      	ldrb	r3, [r7, #23]
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	b25b      	sxtb	r3, r3
 80002c0:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80002c4:	b25b      	sxtb	r3, r3
 80002c6:	75fb      	strb	r3, [r7, #23]
 80002c8:	e002      	b.n	80002d0 <_Z6gencrcPvj+0x50>
            else
                crc <<= 1;
 80002ca:	7dfb      	ldrb	r3, [r7, #23]
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < 8; j++) {
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	3301      	adds	r3, #1
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	e7e9      	b.n	80002ac <_Z6gencrcPvj+0x2c>
    for (i = 0; i < len; i++) {
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	3301      	adds	r3, #1
 80002dc:	613b      	str	r3, [r7, #16]
 80002de:	e7d8      	b.n	8000292 <_Z6gencrcPvj+0x12>
        }
    }
    return crc;
 80002e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
	...

080002f0 <_Z16check_crc_headerP14FirmwareHeader>:
{
	return gencrc(header, sizeof(*header) - 1);
}

bool check_crc_header(FirmwareHeader * header)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	if ( 0x00 != gencrc(header, sizeof(*header)))
 80002f8:	2106      	movs	r1, #6
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f7ff ffc0 	bl	8000280 <_Z6gencrcPvj>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	bf14      	ite	ne
 8000306:	2301      	movne	r3, #1
 8000308:	2300      	moveq	r3, #0
 800030a:	b2db      	uxtb	r3, r3
 800030c:	2b00      	cmp	r3, #0
 800030e:	d00b      	beq.n	8000328 <_Z16check_crc_headerP14FirmwareHeader+0x38>
	{
		printf("CRC %02X %02X", gencrc(header, sizeof(*header)-1),header->crc);
 8000310:	2105      	movs	r1, #5
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f7ff ffb4 	bl	8000280 <_Z6gencrcPvj>
 8000318:	4603      	mov	r3, r0
 800031a:	4619      	mov	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	461a      	mov	r2, r3
 8000322:	4808      	ldr	r0, [pc, #32]	; (8000344 <_Z16check_crc_headerP14FirmwareHeader+0x54>)
 8000324:	f003 fc7a 	bl	8003c1c <iprintf>
	}
	return 0x00 == gencrc(header, sizeof(*header));
 8000328:	2106      	movs	r1, #6
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f7ff ffa8 	bl	8000280 <_Z6gencrcPvj>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	bf0c      	ite	eq
 8000336:	2301      	moveq	r3, #1
 8000338:	2300      	movne	r3, #0
 800033a:	b2db      	uxtb	r3, r3
}
 800033c:	4618      	mov	r0, r3
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	08004b04 	.word	0x08004b04

08000348 <_Z8AppStartv>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void AppStart(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
	uint32_t appJumpAddress;
	void (*GoToApp)(void);
	appJumpAddress = *((volatile uint32_t*)(FIRMWARE_START_ADDRESS + 4)); //указатель на Reset_Handler
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <_Z8AppStartv+0x34>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60fb      	str	r3, [r7, #12]
	GoToApp = (void (*)(void))appJumpAddress;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	60bb      	str	r3, [r7, #8]
	HAL_DeInit();
 8000358:	f000 fc32 	bl	8000bc0 <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
}
 800035e:	bf00      	nop
	__disable_irq();
	__set_MSP(*((volatile uint32_t*)FIRMWARE_START_ADDRESS)); // указатель на вершину стека _estack
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <_Z8AppStartv+0x38>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f383 8808 	msr	MSP, r3
}
 800036c:	bf00      	nop
	GoToApp();
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	4798      	blx	r3
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	08006004 	.word	0x08006004
 8000380:	08006000 	.word	0x08006000

08000384 <_write>:

extern "C" int _write(int file, char *ptr, int len) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t*>(ptr), len, HAL_MAX_DELAY);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	b29a      	uxth	r2, r3
 8000394:	f04f 33ff 	mov.w	r3, #4294967295
 8000398:	68b9      	ldr	r1, [r7, #8]
 800039a:	4804      	ldr	r0, [pc, #16]	; (80003ac <_write+0x28>)
 800039c:	f002 fe0a 	bl	8002fb4 <HAL_UART_Transmit>
    return len;
 80003a0:	687b      	ldr	r3, [r7, #4]
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	2000008c 	.word	0x2000008c

080003b0 <_Z21conv_4byte_ptr_to_u64Ph>:
    }
    printf("\n");
}

uint64_t conv_4byte_ptr_to_u64(uint8_t * ptr)
{
 80003b0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80003b4:	b08d      	sub	sp, #52	; 0x34
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6278      	str	r0, [r7, #36]	; 0x24
	uint64_t res = (uint64_t)(ptr[3]<<24) + (uint64_t)(ptr[2]<<16) + (uint64_t)(ptr[1]<<8) + (uint64_t)ptr[0];
 80003ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003bc:	3303      	adds	r3, #3
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	061b      	lsls	r3, r3, #24
 80003c2:	17da      	asrs	r2, r3, #31
 80003c4:	61bb      	str	r3, [r7, #24]
 80003c6:	61fa      	str	r2, [r7, #28]
 80003c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ca:	3302      	adds	r3, #2
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	041b      	lsls	r3, r3, #16
 80003d0:	17da      	asrs	r2, r3, #31
 80003d2:	613b      	str	r3, [r7, #16]
 80003d4:	617a      	str	r2, [r7, #20]
 80003d6:	69bb      	ldr	r3, [r7, #24]
 80003d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80003dc:	4602      	mov	r2, r0
 80003de:	eb13 0802 	adds.w	r8, r3, r2
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	460a      	mov	r2, r1
 80003e6:	eb43 0902 	adc.w	r9, r3, r2
 80003ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ec:	3301      	adds	r3, #1
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	021b      	lsls	r3, r3, #8
 80003f2:	17da      	asrs	r2, r3, #31
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	60fa      	str	r2, [r7, #12]
 80003f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80003fc:	460b      	mov	r3, r1
 80003fe:	eb18 0403 	adds.w	r4, r8, r3
 8000402:	4613      	mov	r3, r2
 8000404:	eb49 0503 	adc.w	r5, r9, r3
 8000408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	b2db      	uxtb	r3, r3
 800040e:	2200      	movs	r2, #0
 8000410:	469a      	mov	sl, r3
 8000412:	4693      	mov	fp, r2
 8000414:	eb14 030a 	adds.w	r3, r4, sl
 8000418:	603b      	str	r3, [r7, #0]
 800041a:	eb45 030b 	adc.w	r3, r5, fp
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000424:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	return res;
 8000428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800042c:	4610      	mov	r0, r2
 800042e:	4619      	mov	r1, r3
 8000430:	3734      	adds	r7, #52	; 0x34
 8000432:	46bd      	mov	sp, r7
 8000434:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000438:	4770      	bx	lr
	...

0800043c <_Z12clear_memorym>:
	} bint = { 0x01020304 };

	return bint.c[0] == 1;
}
bool clear_memory(uint32_t firmware_size)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	  	  HAL_FLASH_Unlock();
 8000444:	f000 fdac 	bl	8000fa0 <HAL_FLASH_Unlock>
		  static FLASH_EraseInitTypeDef EraseInitStruct;
		  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <_Z12clear_memorym+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
		  EraseInitStruct.PageAddress = FIRMWARE_START_ADDRESS;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <_Z12clear_memorym+0x58>)
 8000450:	4a11      	ldr	r2, [pc, #68]	; (8000498 <_Z12clear_memorym+0x5c>)
 8000452:	605a      	str	r2, [r3, #4]
		  EraseInitStruct.NbPages = (((firmware_size) % FLASH_PAGE_SIZE) != 0) ? ((firmware_size / FLASH_PAGE_SIZE) + 1) : (firmware_size / FLASH_PAGE_SIZE) ;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800045a:	2b00      	cmp	r3, #0
 800045c:	d003      	beq.n	8000466 <_Z12clear_memorym+0x2a>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	0adb      	lsrs	r3, r3, #11
 8000462:	3301      	adds	r3, #1
 8000464:	e001      	b.n	800046a <_Z12clear_memorym+0x2e>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	0adb      	lsrs	r3, r3, #11
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <_Z12clear_memorym+0x58>)
 800046c:	6093      	str	r3, [r2, #8]
		  uint32_t PAGEError;
		  HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 800046e:	f107 0308 	add.w	r3, r7, #8
 8000472:	4619      	mov	r1, r3
 8000474:	4807      	ldr	r0, [pc, #28]	; (8000494 <_Z12clear_memorym+0x58>)
 8000476:	f000 fe47 	bl	8001108 <HAL_FLASHEx_Erase>
 800047a:	4603      	mov	r3, r0
 800047c:	73fb      	strb	r3, [r7, #15]
	  	  //HAL_FLASH_Lock();
		  return HAL_OK == status;
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	2b00      	cmp	r3, #0
 8000482:	bf0c      	ite	eq
 8000484:	2301      	moveq	r3, #1
 8000486:	2300      	movne	r3, #0
 8000488:	b2db      	uxtb	r3, r3
}
 800048a:	4618      	mov	r0, r3
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000110 	.word	0x20000110
 8000498:	08006000 	.word	0x08006000

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b08d      	sub	sp, #52	; 0x34
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fb77 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f8f1 	bl	800068c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f991 	bl	80007d0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004ae:	f000 f95b 	bl	8000768 <_ZL19MX_USART2_UART_Initv>
  /*uint8_t app[] = "APP started";
  HAL_UART_Transmit(&huart2,app,sizeof(app),1000);*/
  //printf("Bootloader started!\n");
  FirmwareHeader header;
  FirmwareBlock block;
  int state = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
  uint32_t offset=0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	62fb      	str	r3, [r7, #44]	; 0x2c
			  printf("START THE APP\n");
			  AppStart();
	  		  break;
	  }
  }*/
  if(HAL_UART_Receive(&huart2,(uint8_t *)&header,sizeof(FirmwareHeader),10000)==HAL_OK)
 80004ba:	f107 010c 	add.w	r1, r7, #12
 80004be:	f242 7310 	movw	r3, #10000	; 0x2710
 80004c2:	2206      	movs	r2, #6
 80004c4:	4867      	ldr	r0, [pc, #412]	; (8000664 <main+0x1c8>)
 80004c6:	f002 fe09 	bl	80030dc <HAL_UART_Receive>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	bf0c      	ite	eq
 80004d0:	2301      	moveq	r3, #1
 80004d2:	2300      	movne	r3, #0
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	f000 80b5 	beq.w	8000646 <main+0x1aa>
  {
	  //GOT HADER FLASH MEMORY
	  //dump((uint8_t *)&header,sizeof(header));
	  if (check_crc_header(&header))
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ff05 	bl	80002f0 <_Z16check_crc_headerP14FirmwareHeader>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	f000 80a8 	beq.w	800063e <main+0x1a2>
	  {
		  //printf("CRC OK\n");
		  if(clear_memory((uint32_t)header.blocksize * header.num_blocks))
 80004ee:	7c3b      	ldrb	r3, [r7, #16]
 80004f0:	89fa      	ldrh	r2, [r7, #14]
 80004f2:	fb02 f303 	mul.w	r3, r2, r3
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffa0 	bl	800043c <_Z12clear_memorym>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	f000 8099 	beq.w	8000636 <main+0x19a>
		  {

			  //printf("clear mem OK\n");
			  for (int i = header.num_blocks; i >= 0; i--)
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28
 8000508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800050a:	2b00      	cmp	r3, #0
 800050c:	f2c0 808d 	blt.w	800062a <main+0x18e>
			  		{
			  			uint8_t *block_buff = new uint8_t [header.blocksize+sizeof(block.crc)];
 8000510:	7c3b      	ldrb	r3, [r7, #16]
 8000512:	3301      	adds	r3, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fa3a 	bl	800398e <_Znaj>
 800051a:	4603      	mov	r3, r0
 800051c:	617b      	str	r3, [r7, #20]
			  			block.data = block_buff;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	607b      	str	r3, [r7, #4]
			  			if (HAL_OK == HAL_UART_Receive(&huart2, block.data, header.blocksize + sizeof(block.crc), 1000)){
 8000522:	6879      	ldr	r1, [r7, #4]
 8000524:	7c3b      	ldrb	r3, [r7, #16]
 8000526:	b29b      	uxth	r3, r3
 8000528:	3301      	adds	r3, #1
 800052a:	b29a      	uxth	r2, r3
 800052c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000530:	484c      	ldr	r0, [pc, #304]	; (8000664 <main+0x1c8>)
 8000532:	f002 fdd3 	bl	80030dc <HAL_UART_Receive>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf0c      	ite	eq
 800053c:	2301      	moveq	r3, #1
 800053e:	2300      	movne	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d064      	beq.n	8000610 <main+0x174>
			  				block.crc = block.data[header.blocksize];
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	7c3a      	ldrb	r2, [r7, #16]
 800054a:	4413      	add	r3, r2
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	723b      	strb	r3, [r7, #8]
			  				for (int i=0;i<header.blocksize;i++) printf("%02X ", block.data[i]);
 8000550:	2300      	movs	r3, #0
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
 8000554:	7c3b      	ldrb	r3, [r7, #16]
 8000556:	461a      	mov	r2, r3
 8000558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055a:	4293      	cmp	r3, r2
 800055c:	da0b      	bge.n	8000576 <main+0xda>
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000562:	4413      	add	r3, r2
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	4619      	mov	r1, r3
 8000568:	483f      	ldr	r0, [pc, #252]	; (8000668 <main+0x1cc>)
 800056a:	f003 fb57 	bl	8003c1c <iprintf>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3301      	adds	r3, #1
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
 8000574:	e7ee      	b.n	8000554 <main+0xb8>
			  				printf("%02X\n",block.crc);
 8000576:	7a3b      	ldrb	r3, [r7, #8]
 8000578:	4619      	mov	r1, r3
 800057a:	483c      	ldr	r0, [pc, #240]	; (800066c <main+0x1d0>)
 800057c:	f003 fb4e 	bl	8003c1c <iprintf>
							if (block.crc == gencrc(block.data, header.blocksize))
 8000580:	7a3c      	ldrb	r4, [r7, #8]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7c3a      	ldrb	r2, [r7, #16]
 8000586:	4611      	mov	r1, r2
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe79 	bl	8000280 <_Z6gencrcPvj>
 800058e:	4603      	mov	r3, r0
 8000590:	429c      	cmp	r4, r3
 8000592:	bf0c      	ite	eq
 8000594:	2301      	moveq	r3, #1
 8000596:	2300      	movne	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d029      	beq.n	80005f2 <main+0x156>
							{
								uint32_t local_offset = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]

								for (int j = 0; j < header.blocksize/WORD; j++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
 80005a6:	7c3b      	ldrb	r3, [r7, #16]
 80005a8:	089b      	lsrs	r3, r3, #2
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	4293      	cmp	r3, r2
 80005b2:	da1a      	bge.n	80005ea <main+0x14e>
								{

									HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t) (FIRMWARE_START_ADDRESS + offset), conv_4byte_ptr_to_u64(block.data + local_offset));
 80005b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b6:	f103 6400 	add.w	r4, r3, #134217728	; 0x8000000
 80005ba:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	4413      	add	r3, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fef3 	bl	80003b0 <_Z21conv_4byte_ptr_to_u64Ph>
 80005ca:	4602      	mov	r2, r0
 80005cc:	460b      	mov	r3, r1
 80005ce:	4621      	mov	r1, r4
 80005d0:	2002      	movs	r0, #2
 80005d2:	f000 fc75 	bl	8000ec0 <HAL_FLASH_Program>
									offset += 4;
 80005d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d8:	3304      	adds	r3, #4
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
									local_offset += 4;
 80005dc:	6a3b      	ldr	r3, [r7, #32]
 80005de:	3304      	adds	r3, #4
 80005e0:	623b      	str	r3, [r7, #32]
								for (int j = 0; j < header.blocksize/WORD; j++)
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3301      	adds	r3, #1
 80005e6:	61fb      	str	r3, [r7, #28]
 80005e8:	e7dd      	b.n	80005a6 <main+0x10a>
								}
								printf("OK\n");
 80005ea:	4821      	ldr	r0, [pc, #132]	; (8000670 <main+0x1d4>)
 80005ec:	f003 fb9c 	bl	8003d28 <puts>
 80005f0:	e011      	b.n	8000616 <main+0x17a>
							}else {
								printf("block crc err got %02X calc %02X\n",block.crc, gencrc(block.data, header.blocksize));
 80005f2:	7a3b      	ldrb	r3, [r7, #8]
 80005f4:	461c      	mov	r4, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7c3a      	ldrb	r2, [r7, #16]
 80005fa:	4611      	mov	r1, r2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fe3f 	bl	8000280 <_Z6gencrcPvj>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4621      	mov	r1, r4
 8000608:	481a      	ldr	r0, [pc, #104]	; (8000674 <main+0x1d8>)
 800060a:	f003 fb07 	bl	8003c1c <iprintf>
 800060e:	e002      	b.n	8000616 <main+0x17a>
							}

			  			}else
			  			{
			  				printf("get block err\n");
 8000610:	4819      	ldr	r0, [pc, #100]	; (8000678 <main+0x1dc>)
 8000612:	f003 fb89 	bl	8003d28 <puts>
			  			}
			  			//dump(block.data, header.blocksize);
			  			delete []block_buff;
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d002      	beq.n	8000622 <main+0x186>
 800061c:	6978      	ldr	r0, [r7, #20]
 800061e:	f003 f9b4 	bl	800398a <_ZdaPv>
			  for (int i = header.num_blocks; i >= 0; i--)
 8000622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000624:	3b01      	subs	r3, #1
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
 8000628:	e76e      	b.n	8000508 <main+0x6c>

			  		}
			  printf("START THE APP\n");
 800062a:	4814      	ldr	r0, [pc, #80]	; (800067c <main+0x1e0>)
 800062c:	f003 fb7c 	bl	8003d28 <puts>
			  AppStart();
 8000630:	f7ff fe8a 	bl	8000348 <_Z8AppStartv>
 8000634:	e00c      	b.n	8000650 <main+0x1b4>
		  }else{
			  printf("clear mem not success\n");
 8000636:	4812      	ldr	r0, [pc, #72]	; (8000680 <main+0x1e4>)
 8000638:	f003 fb76 	bl	8003d28 <puts>
 800063c:	e008      	b.n	8000650 <main+0x1b4>
		  }
	  }else
	  {
		  printf("wrong crc header\n");
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <main+0x1e8>)
 8000640:	f003 fb72 	bl	8003d28 <puts>
 8000644:	e004      	b.n	8000650 <main+0x1b4>
	  }
  }else {
	  printf("No data\n");
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <main+0x1ec>)
 8000648:	f003 fb6e 	bl	8003d28 <puts>
	  AppStart();
 800064c:	f7ff fe7c 	bl	8000348 <_Z8AppStartv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000650:	2120      	movs	r1, #32
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f000 ff9d 	bl	8001594 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 800065a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800065e:	f000 fb25 	bl	8000cac <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000662:	e7f5      	b.n	8000650 <main+0x1b4>
 8000664:	2000008c 	.word	0x2000008c
 8000668:	08004b14 	.word	0x08004b14
 800066c:	08004b1c 	.word	0x08004b1c
 8000670:	08004b24 	.word	0x08004b24
 8000674:	08004b28 	.word	0x08004b28
 8000678:	08004b4c 	.word	0x08004b4c
 800067c:	08004b5c 	.word	0x08004b5c
 8000680:	08004b6c 	.word	0x08004b6c
 8000684:	08004b84 	.word	0x08004b84
 8000688:	08004b98 	.word	0x08004b98

0800068c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b0a6      	sub	sp, #152	; 0x98
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000696:	2228      	movs	r2, #40	; 0x28
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 f9d6 	bl	8003a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2258      	movs	r2, #88	; 0x58
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f9c8 	bl	8003a4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 ff6c 	bl	80015c8 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bf14      	ite	ne
 80006f6:	2301      	movne	r3, #1
 80006f8:	2300      	moveq	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000700:	f000 f8cc 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000714:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800071e:	2102      	movs	r1, #2
 8000720:	4618      	mov	r0, r3
 8000722:	f001 ffa5 	bl	8002670 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	bf14      	ite	ne
 800072c:	2301      	movne	r3, #1
 800072e:	2300      	moveq	r3, #0
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8000736:	f000 f8b1 	bl	800089c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800073a:	2302      	movs	r3, #2
 800073c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f9c9 	bl	8002adc <HAL_RCCEx_PeriphCLKConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800075a:	f000 f89f 	bl	800089c <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3798      	adds	r7, #152	; 0x98
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <_ZL19MX_USART2_UART_Initv+0x64>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000774:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007ac:	f002 fbb4 	bl	8002f18 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf14      	ite	ne
 80007b6:	2301      	movne	r3, #1
 80007b8:	2300      	moveq	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80007c0:	f000 f86c 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000008c 	.word	0x2000008c
 80007cc:	40004400 	.word	0x40004400

080007d0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a2a      	ldr	r2, [pc, #168]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 80007ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a24      	ldr	r2, [pc, #144]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 8000804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 8000834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <_ZL12MX_GPIO_Initv+0xc4>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f000 fe89 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000858:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <_ZL12MX_GPIO_Initv+0xc8>)
 800086a:	f000 fcf1 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086e:	2320      	movs	r3, #32
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f000 fce2 	bl	8001250 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	48000800 	.word	0x48000800

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x44>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x44>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x44>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x44>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008de:	2007      	movs	r0, #7
 80008e0:	f000 faba 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_UART_MspInit+0x7c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d128      	bne.n	8000964 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0x80>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000942:	230c      	movs	r3, #12
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000952:	2307      	movs	r3, #7
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f000 fc76 	bl	8001250 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40004400 	.word	0x40004400
 8000970:	40021000 	.word	0x40021000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 f954 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_kill>:

int _kill(int pid, int sig)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009e2:	f002 fff9 	bl	80039d8 <__errno>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2216      	movs	r2, #22
 80009ea:	601a      	str	r2, [r3, #0]
	return -1;
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_exit>:

void _exit (int status)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ffe7 	bl	80009d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a0a:	e7fe      	b.n	8000a0a <_exit+0x12>

08000a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
	}

return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_isatty>:

int _isatty(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	return 1;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae0:	f002 ff7a 	bl	80039d8 <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20010000 	.word	0x20010000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	2000011c 	.word	0x2000011c
 8000b18:	20000160 	.word	0x20000160

08000b1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b5c:	4c0b      	ldr	r4, [pc, #44]	; (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b6a:	f7ff ffd7 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f002 ff39 	bl	80039e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b72:	f7ff fc93 	bl	800049c <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b84:	08004c78 	.word	0x08004c78
  ldr r2, =_sbss
 8000b88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b8c:	2000015c 	.word	0x2000015c

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x28>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x28>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f957 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f82e 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fe7a 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_DeInit+0x38>)
 8000bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bca:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_DeInit+0x38>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_DeInit+0x38>)
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_DeInit+0x38>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_DeInit+0x38>)
 8000be2:	f04f 32ff 	mov.w	r2, #4294967295
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_DeInit+0x38>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000bee:	f000 f805 	bl	8000bfc <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000

08000bfc <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f93b 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 f911 	bl	8000e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000120 	.word	0x20000120

08000c94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000120 	.word	0x20000120

08000cac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff ffee 	bl	8000c94 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_Delay+0x44>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffde 	bl	8000c94 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff8e 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff47 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff5c 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff8e 	bl	8000dac <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffb0 	bl	8000e14 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_FLASH_Program+0xd8>)
 8000edc:	7e1b      	ldrb	r3, [r3, #24]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_FLASH_Program+0x26>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e054      	b.n	8000f90 <HAL_FLASH_Program+0xd0>
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <HAL_FLASH_Program+0xd8>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ef0:	f000 f898 	bl	8001024 <FLASH_WaitForLastOperation>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d144      	bne.n	8000f88 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d102      	bne.n	8000f0a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000f04:	2301      	movs	r3, #1
 8000f06:	757b      	strb	r3, [r7, #21]
 8000f08:	e007      	b.n	8000f1a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d102      	bne.n	8000f16 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000f10:	2302      	movs	r3, #2
 8000f12:	757b      	strb	r3, [r7, #21]
 8000f14:	e001      	b.n	8000f1a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000f16:	2304      	movs	r3, #4
 8000f18:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	75bb      	strb	r3, [r7, #22]
 8000f1e:	e02d      	b.n	8000f7c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f20:	7dbb      	ldrb	r3, [r7, #22]
 8000f22:	005a      	lsls	r2, r3, #1
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	eb02 0c03 	add.w	ip, r2, r3
 8000f2a:	7dbb      	ldrb	r3, [r7, #22]
 8000f2c:	0119      	lsls	r1, r3, #4
 8000f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f32:	f1c1 0620 	rsb	r6, r1, #32
 8000f36:	f1a1 0020 	sub.w	r0, r1, #32
 8000f3a:	fa22 f401 	lsr.w	r4, r2, r1
 8000f3e:	fa03 f606 	lsl.w	r6, r3, r6
 8000f42:	4334      	orrs	r4, r6
 8000f44:	fa23 f000 	lsr.w	r0, r3, r0
 8000f48:	4304      	orrs	r4, r0
 8000f4a:	fa23 f501 	lsr.w	r5, r3, r1
 8000f4e:	b2a3      	uxth	r3, r4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4660      	mov	r0, ip
 8000f54:	f000 f84a 	bl	8000fec <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f5c:	f000 f862 	bl	8001024 <FLASH_WaitForLastOperation>
 8000f60:	4603      	mov	r3, r0
 8000f62:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_FLASH_Program+0xdc>)
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <HAL_FLASH_Program+0xdc>)
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d107      	bne.n	8000f86 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000f76:	7dbb      	ldrb	r3, [r7, #22]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	75bb      	strb	r3, [r7, #22]
 8000f7c:	7dba      	ldrb	r2, [r7, #22]
 8000f7e:	7d7b      	ldrb	r3, [r7, #21]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3cd      	bcc.n	8000f20 <HAL_FLASH_Program+0x60>
 8000f84:	e000      	b.n	8000f88 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000f86:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_FLASH_Program+0xd8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	761a      	strb	r2, [r3, #24]

  return status;
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f98:	20000128 	.word	0x20000128
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_FLASH_Unlock+0x40>)
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_FLASH_Unlock+0x40>)
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_FLASH_Unlock+0x44>)
 8000fba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_FLASH_Unlock+0x40>)
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_FLASH_Unlock+0x48>)
 8000fc0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_FLASH_Unlock+0x40>)
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40022000 	.word	0x40022000
 8000fe4:	45670123 	.word	0x45670123
 8000fe8:	cdef89ab 	.word	0xcdef89ab

08000fec <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <FLASH_Program_HalfWord+0x30>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <FLASH_Program_HalfWord+0x34>)
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <FLASH_Program_HalfWord+0x34>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	887a      	ldrh	r2, [r7, #2]
 800100e:	801a      	strh	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	20000128 	.word	0x20000128
 8001020:	40022000 	.word	0x40022000

08001024 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff fe32 	bl	8000c94 <HAL_GetTick>
 8001030:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001032:	e010      	b.n	8001056 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103a:	d00c      	beq.n	8001056 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <FLASH_WaitForLastOperation+0x2e>
 8001042:	f7ff fe27 	bl	8000c94 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	429a      	cmp	r2, r3
 8001050:	d201      	bcs.n	8001056 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e01f      	b.n	8001096 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <FLASH_WaitForLastOperation+0x7c>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b01      	cmp	r3, #1
 8001060:	d0e8      	beq.n	8001034 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <FLASH_WaitForLastOperation+0x7c>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	2b20      	cmp	r3, #32
 800106c:	d102      	bne.n	8001074 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <FLASH_WaitForLastOperation+0x7c>)
 8001070:	2220      	movs	r2, #32
 8001072:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <FLASH_WaitForLastOperation+0x7c>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	2b10      	cmp	r3, #16
 800107e:	d005      	beq.n	800108c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <FLASH_WaitForLastOperation+0x7c>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001088:	2b04      	cmp	r3, #4
 800108a:	d103      	bne.n	8001094 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800108c:	f000 f80a 	bl	80010a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40022000 	.word	0x40022000

080010a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <FLASH_SetErrorCode+0x5c>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b10      	cmp	r3, #16
 80010b8:	d109      	bne.n	80010ce <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <FLASH_SetErrorCode+0x60>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <FLASH_SetErrorCode+0x60>)
 80010c4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <FLASH_SetErrorCode+0x5c>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d109      	bne.n	80010ee <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <FLASH_SetErrorCode+0x60>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <FLASH_SetErrorCode+0x60>)
 80010e4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <FLASH_SetErrorCode+0x5c>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	60d3      	str	r3, [r2, #12]
}  
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40022000 	.word	0x40022000
 8001104:	20000128 	.word	0x20000128

08001108 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_FLASHEx_Erase+0xcc>)
 800111c:	7e1b      	ldrb	r3, [r3, #24]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_FLASHEx_Erase+0x1e>
 8001122:	2302      	movs	r3, #2
 8001124:	e052      	b.n	80011cc <HAL_FLASHEx_Erase+0xc4>
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_FLASHEx_Erase+0xcc>)
 8001128:	2201      	movs	r2, #1
 800112a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d115      	bne.n	8001160 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001134:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001138:	f7ff ff74 	bl	8001024 <FLASH_WaitForLastOperation>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d140      	bne.n	80011c4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001142:	f000 f84b 	bl	80011dc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001146:	f24c 3050 	movw	r0, #50000	; 0xc350
 800114a:	f7ff ff6b 	bl	8001024 <FLASH_WaitForLastOperation>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_FLASHEx_Erase+0xd0>)
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <HAL_FLASHEx_Erase+0xd0>)
 8001158:	f023 0304 	bic.w	r3, r3, #4
 800115c:	6113      	str	r3, [r2, #16]
 800115e:	e031      	b.n	80011c4 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001160:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001164:	f7ff ff5e 	bl	8001024 <FLASH_WaitForLastOperation>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d12a      	bne.n	80011c4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	e019      	b.n	80011b2 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800117e:	68b8      	ldr	r0, [r7, #8]
 8001180:	f000 f846 	bl	8001210 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001184:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001188:	f7ff ff4c 	bl	8001024 <FLASH_WaitForLastOperation>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_FLASHEx_Erase+0xd0>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_FLASHEx_Erase+0xd0>)
 8001196:	f023 0302 	bic.w	r3, r3, #2
 800119a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	601a      	str	r2, [r3, #0]
            break;
 80011a8:	e00c      	b.n	80011c4 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011b0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	02da      	lsls	r2, r3, #11
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d3dc      	bcc.n	800117e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_FLASHEx_Erase+0xcc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	761a      	strb	r2, [r3, #24]

  return status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000128 	.word	0x20000128
 80011d8:	40022000 	.word	0x40022000

080011dc <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <FLASH_MassErase+0x2c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <FLASH_MassErase+0x30>)
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <FLASH_MassErase+0x30>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <FLASH_MassErase+0x30>)
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <FLASH_MassErase+0x30>)
 80011f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fc:	6113      	str	r3, [r2, #16]
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000128 	.word	0x20000128
 800120c:	40022000 	.word	0x40022000

08001210 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <FLASH_PageErase+0x38>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <FLASH_PageErase+0x3c>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <FLASH_PageErase+0x3c>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <FLASH_PageErase+0x3c>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <FLASH_PageErase+0x3c>)
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <FLASH_PageErase+0x3c>)
 8001236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123a:	6113      	str	r3, [r2, #16]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000128 	.word	0x20000128
 800124c:	40022000 	.word	0x40022000

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	e160      	b.n	8001522 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2101      	movs	r1, #1
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8152 	beq.w	800151c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b01      	cmp	r3, #1
 8001282:	d005      	beq.n	8001290 <HAL_GPIO_Init+0x40>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d130      	bne.n	80012f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c6:	2201      	movs	r2, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f003 0201 	and.w	r2, r3, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d017      	beq.n	800132e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d123      	bne.n	8001382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	6939      	ldr	r1, [r7, #16]
 800137e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0203 	and.w	r2, r3, #3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80ac 	beq.w	800151c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c4:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a5d      	ldr	r2, [pc, #372]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013dc:	4a59      	ldr	r2, [pc, #356]	; (8001544 <HAL_GPIO_Init+0x2f4>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001406:	d025      	beq.n	8001454 <HAL_GPIO_Init+0x204>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x2f8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d01f      	beq.n	8001450 <HAL_GPIO_Init+0x200>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a4e      	ldr	r2, [pc, #312]	; (800154c <HAL_GPIO_Init+0x2fc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d019      	beq.n	800144c <HAL_GPIO_Init+0x1fc>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <HAL_GPIO_Init+0x300>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d013      	beq.n	8001448 <HAL_GPIO_Init+0x1f8>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a4c      	ldr	r2, [pc, #304]	; (8001554 <HAL_GPIO_Init+0x304>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d00d      	beq.n	8001444 <HAL_GPIO_Init+0x1f4>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_GPIO_Init+0x308>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0x1f0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a4a      	ldr	r2, [pc, #296]	; (800155c <HAL_GPIO_Init+0x30c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_GPIO_Init+0x1ec>
 8001438:	2306      	movs	r3, #6
 800143a:	e00c      	b.n	8001456 <HAL_GPIO_Init+0x206>
 800143c:	2307      	movs	r3, #7
 800143e:	e00a      	b.n	8001456 <HAL_GPIO_Init+0x206>
 8001440:	2305      	movs	r3, #5
 8001442:	e008      	b.n	8001456 <HAL_GPIO_Init+0x206>
 8001444:	2304      	movs	r3, #4
 8001446:	e006      	b.n	8001456 <HAL_GPIO_Init+0x206>
 8001448:	2303      	movs	r3, #3
 800144a:	e004      	b.n	8001456 <HAL_GPIO_Init+0x206>
 800144c:	2302      	movs	r3, #2
 800144e:	e002      	b.n	8001456 <HAL_GPIO_Init+0x206>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_GPIO_Init+0x206>
 8001454:	2300      	movs	r3, #0
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	f002 0203 	and.w	r2, r2, #3
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	4093      	lsls	r3, r2
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001466:	4937      	ldr	r1, [pc, #220]	; (8001544 <HAL_GPIO_Init+0x2f4>)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_GPIO_Init+0x310>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001498:	4a31      	ldr	r2, [pc, #196]	; (8001560 <HAL_GPIO_Init+0x310>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800149e:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_GPIO_Init+0x310>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014c2:	4a27      	ldr	r2, [pc, #156]	; (8001560 <HAL_GPIO_Init+0x310>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_GPIO_Init+0x310>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ec:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_GPIO_Init+0x310>)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_GPIO_Init+0x310>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <HAL_GPIO_Init+0x310>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa22 f303 	lsr.w	r3, r2, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	f47f ae97 	bne.w	8001260 <HAL_GPIO_Init+0x10>
  }
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	48000400 	.word	0x48000400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000c00 	.word	0x48000c00
 8001554:	48001000 	.word	0x48001000
 8001558:	48001400 	.word	0x48001400
 800155c:	48001800 	.word	0x48001800
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001580:	e002      	b.n	8001588 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43d9      	mvns	r1, r3
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	400b      	ands	r3, r1
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015d8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f001 b83a 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 816f 	beq.w	80018e2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001604:	4bb5      	ldr	r3, [pc, #724]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b04      	cmp	r3, #4
 800160e:	d00c      	beq.n	800162a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001610:	4bb2      	ldr	r3, [pc, #712]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d15c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x10e>
 800161c:	4baf      	ldr	r3, [pc, #700]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d155      	bne.n	80016d6 <HAL_RCC_OscConfig+0x10e>
 800162a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800162e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800163e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	095b      	lsrs	r3, r3, #5
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <HAL_RCC_OscConfig+0x94>
 8001656:	4ba1      	ldr	r3, [pc, #644]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	e015      	b.n	8001688 <HAL_RCC_OscConfig+0xc0>
 800165c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001660:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001668:	fa93 f3a3 	rbit	r3, r3
 800166c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001674:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001678:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001684:	4b95      	ldr	r3, [pc, #596]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800168c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001690:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001694:	fa92 f2a2 	rbit	r2, r2
 8001698:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800169c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016a0:	fab2 f282 	clz	r2, r2
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	f042 0220 	orr.w	r2, r2, #32
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	f002 021f 	and.w	r2, r2, #31
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f202 	lsl.w	r2, r1, r2
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 8111 	beq.w	80018e0 <HAL_RCC_OscConfig+0x318>
 80016be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 8108 	bne.w	80018e0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	f000 bfc6 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12e>
 80016e8:	4b7c      	ldr	r3, [pc, #496]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a7b      	ldr	r2, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e036      	b.n	8001764 <HAL_RCC_OscConfig+0x19c>
 80016f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x158>
 8001706:	4b75      	ldr	r3, [pc, #468]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a74      	ldr	r2, [pc, #464]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 800170c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a71      	ldr	r2, [pc, #452]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e021      	b.n	8001764 <HAL_RCC_OscConfig+0x19c>
 8001720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001724:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x184>
 8001732:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a69      	ldr	r2, [pc, #420]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a66      	ldr	r2, [pc, #408]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0x19c>
 800174c:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a62      	ldr	r2, [pc, #392]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b60      	ldr	r3, [pc, #384]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a5f      	ldr	r2, [pc, #380]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001768:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d059      	beq.n	8001828 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fa8e 	bl	8000c94 <HAL_GetTick>
 8001778:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177e:	f7ff fa89 	bl	8000c94 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d902      	bls.n	8001794 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	f000 bf67 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001798:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80017a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d102      	bne.n	80017c6 <HAL_RCC_OscConfig+0x1fe>
 80017c0:	4b46      	ldr	r3, [pc, #280]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x22a>
 80017c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80017da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80017fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80017fe:	fa92 f2a2 	rbit	r2, r2
 8001802:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001806:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800180a:	fab2 f282 	clz	r2, r2
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	f042 0220 	orr.w	r2, r2, #32
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	f002 021f 	and.w	r2, r2, #31
 800181a:	2101      	movs	r1, #1
 800181c:	fa01 f202 	lsl.w	r2, r1, r2
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0ab      	beq.n	800177e <HAL_RCC_OscConfig+0x1b6>
 8001826:	e05c      	b.n	80018e2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fa34 	bl	8000c94 <HAL_GetTick>
 800182c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001832:	f7ff fa2f 	bl	8000c94 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d902      	bls.n	8001848 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	f000 bf0d 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800185c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d102      	bne.n	800187a <HAL_RCC_OscConfig+0x2b2>
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	e015      	b.n	80018a6 <HAL_RCC_OscConfig+0x2de>
 800187a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800187e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800188e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001892:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001896:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80018ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80018b2:	fa92 f2a2 	rbit	r2, r2
 80018b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80018ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018be:	fab2 f282 	clz	r2, r2
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f042 0220 	orr.w	r2, r2, #32
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f002 021f 	and.w	r2, r2, #31
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ab      	bne.n	8001832 <HAL_RCC_OscConfig+0x26a>
 80018da:	e002      	b.n	80018e2 <HAL_RCC_OscConfig+0x31a>
 80018dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 817f 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018f8:	4ba7      	ldr	r3, [pc, #668]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00c      	beq.n	800191e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001904:	4ba4      	ldr	r3, [pc, #656]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d173      	bne.n	80019f8 <HAL_RCC_OscConfig+0x430>
 8001910:	4ba1      	ldr	r3, [pc, #644]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800191c:	d16c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x430>
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001930:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0x386>
 8001948:	4b93      	ldr	r3, [pc, #588]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	e013      	b.n	8001976 <HAL_RCC_OscConfig+0x3ae>
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001966:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001972:	4b89      	ldr	r3, [pc, #548]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	2202      	movs	r2, #2
 8001978:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800197c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001980:	fa92 f2a2 	rbit	r2, r2
 8001984:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001988:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800198c:	fab2 f282 	clz	r2, r2
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f042 0220 	orr.w	r2, r2, #32
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	f002 021f 	and.w	r2, r2, #31
 800199c:	2101      	movs	r1, #1
 800199e:	fa01 f202 	lsl.w	r2, r1, r2
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00a      	beq.n	80019be <HAL_RCC_OscConfig+0x3f6>
 80019a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d002      	beq.n	80019be <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f000 be52 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	21f8      	movs	r1, #248	; 0xf8
 80019d4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80019dc:	fa91 f1a1 	rbit	r1, r1
 80019e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80019e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019e8:	fab1 f181 	clz	r1, r1
 80019ec:	b2c9      	uxtb	r1, r1
 80019ee:	408b      	lsls	r3, r1
 80019f0:	4969      	ldr	r1, [pc, #420]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e0fe      	b.n	8001bf6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8088 	beq.w	8001b1a <HAL_RCC_OscConfig+0x552>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001a1c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	461a      	mov	r2, r3
 8001a32:	2301      	movs	r3, #1
 8001a34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff f92d 	bl	8000c94 <HAL_GetTick>
 8001a3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff f928 	bl	8000c94 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d902      	bls.n	8001a56 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	f000 be06 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001a68:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x4be>
 8001a80:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e013      	b.n	8001aae <HAL_RCC_OscConfig+0x4e6>
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a9e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001ab4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001ab8:	fa92 f2a2 	rbit	r2, r2
 8001abc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001ac0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ac4:	fab2 f282 	clz	r2, r2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f002 021f 	and.w	r2, r2, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0af      	beq.n	8001a40 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	21f8      	movs	r1, #248	; 0xf8
 8001af6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001afe:	fa91 f1a1 	rbit	r1, r1
 8001b02:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001b06:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b0a:	fab1 f181 	clz	r1, r1
 8001b0e:	b2c9      	uxtb	r1, r1
 8001b10:	408b      	lsls	r3, r1
 8001b12:	4921      	ldr	r1, [pc, #132]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e06d      	b.n	8001bf6 <HAL_RCC_OscConfig+0x62e>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001b2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	461a      	mov	r2, r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff f8a5 	bl	8000c94 <HAL_GetTick>
 8001b4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff f8a0 	bl	8000c94 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d902      	bls.n	8001b66 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	f000 bd7e 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001b78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5d4>
 8001b90:	4b01      	ldr	r3, [pc, #4]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	e016      	b.n	8001bc4 <HAL_RCC_OscConfig+0x5fc>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001bae:	2302      	movs	r3, #2
 8001bb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bc0:	4bbf      	ldr	r3, [pc, #764]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001bca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001bce:	fa92 f2a2 	rbit	r2, r2
 8001bd2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001bd6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bda:	fab2 f282 	clz	r2, r2
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f042 0220 	orr.w	r2, r2, #32
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f002 021f 	and.w	r2, r2, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ac      	bne.n	8001b50 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8113 	beq.w	8001e32 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d07c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x74e>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001c2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4ba2      	ldr	r3, [pc, #648]	; (8001ec4 <HAL_RCC_OscConfig+0x8fc>)
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	461a      	mov	r2, r3
 8001c42:	2301      	movs	r3, #1
 8001c44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff f825 	bl	8000c94 <HAL_GetTick>
 8001c4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff f820 	bl	8000c94 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d902      	bls.n	8001c66 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	f000 bcfe 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c86:	2202      	movs	r2, #2
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001caa:	2202      	movs	r2, #2
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	4b7e      	ldr	r3, [pc, #504]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	6019      	str	r1, [r3, #0]
 8001cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f1a3 	rbit	r1, r3
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cec:	6019      	str	r1, [r3, #0]
  return result;
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d09d      	beq.n	8001c50 <HAL_RCC_OscConfig+0x688>
 8001d14:	e08d      	b.n	8001e32 <HAL_RCC_OscConfig+0x86a>
 8001d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d34:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d38:	601a      	str	r2, [r3, #0]
  return result;
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d42:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x8fc>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	461a      	mov	r2, r3
 8001d54:	2300      	movs	r3, #0
 8001d56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7fe ff9c 	bl	8000c94 <HAL_GetTick>
 8001d5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d62:	f7fe ff97 	bl	8000c94 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d902      	bls.n	8001d78 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	f000 bc75 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d80:	2202      	movs	r2, #2
 8001d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fa93 f2a3 	rbit	r2, r3
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001da4:	2202      	movs	r2, #2
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dc8:	2202      	movs	r2, #2
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001de2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001df0:	2102      	movs	r1, #2
 8001df2:	6019      	str	r1, [r3, #0]
 8001df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f1a3 	rbit	r1, r3
 8001e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e06:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e0a:	6019      	str	r1, [r3, #0]
  return result;
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d197      	bne.n	8001d62 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 81a5 	beq.w	8002192 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e80:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_RCC_OscConfig+0x900>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d121      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_RCC_OscConfig+0x900>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <HAL_RCC_OscConfig+0x900>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea0:	f7fe fef8 	bl	8000c94 <HAL_GetTick>
 8001ea4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e010      	b.n	8001ecc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7fe fef3 	bl	8000c94 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d908      	bls.n	8001ecc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e3d1      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	10908120 	.word	0x10908120
 8001ec8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	4b8d      	ldr	r3, [pc, #564]	; (8002104 <HAL_RCC_OscConfig+0xb3c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0e8      	beq.n	8001eaa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x92e>
 8001ee8:	4b87      	ldr	r3, [pc, #540]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a86      	ldr	r2, [pc, #536]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e035      	b.n	8001f62 <HAL_RCC_OscConfig+0x99a>
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x958>
 8001f06:	4b80      	ldr	r3, [pc, #512]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a7f      	ldr	r2, [pc, #508]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a7c      	ldr	r2, [pc, #496]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	e020      	b.n	8001f62 <HAL_RCC_OscConfig+0x99a>
 8001f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d10c      	bne.n	8001f4a <HAL_RCC_OscConfig+0x982>
 8001f30:	4b75      	ldr	r3, [pc, #468]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a74      	ldr	r2, [pc, #464]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	4b72      	ldr	r3, [pc, #456]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a71      	ldr	r2, [pc, #452]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6213      	str	r3, [r2, #32]
 8001f48:	e00b      	b.n	8001f62 <HAL_RCC_OscConfig+0x99a>
 8001f4a:	4b6f      	ldr	r3, [pc, #444]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6213      	str	r3, [r2, #32]
 8001f56:	4b6c      	ldr	r3, [pc, #432]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a6b      	ldr	r2, [pc, #428]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8081 	beq.w	8002076 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7fe fe8e 	bl	8000c94 <HAL_GetTick>
 8001f78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	e00b      	b.n	8001f96 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7fe fe89 	bl	8000c94 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e365      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 8001f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fa93 f2a3 	rbit	r2, r3
 8001fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fa93 f2a3 	rbit	r2, r3
 8001fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fdc:	601a      	str	r2, [r3, #0]
  return result;
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fe6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d102      	bne.n	8002002 <HAL_RCC_OscConfig+0xa3a>
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	e013      	b.n	800202a <HAL_RCC_OscConfig+0xa62>
 8002002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002006:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800200a:	2202      	movs	r2, #2
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002020:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800202e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002032:	2102      	movs	r1, #2
 8002034:	6011      	str	r1, [r2, #0]
 8002036:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800203a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	fa92 f1a2 	rbit	r1, r2
 8002044:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002048:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800204c:	6011      	str	r1, [r2, #0]
  return result;
 800204e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002052:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	fab2 f282 	clz	r2, r2
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f002 021f 	and.w	r2, r2, #31
 8002068:	2101      	movs	r1, #1
 800206a:	fa01 f202 	lsl.w	r2, r1, r2
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d084      	beq.n	8001f7e <HAL_RCC_OscConfig+0x9b6>
 8002074:	e083      	b.n	800217e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7fe fe0d 	bl	8000c94 <HAL_GetTick>
 800207a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7fe fe08 	bl	8000c94 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e2e4      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 8002098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020a0:	2202      	movs	r2, #2
 80020a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020c4:	2202      	movs	r2, #2
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020de:	601a      	str	r2, [r3, #0]
  return result;
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	095b      	lsrs	r3, r3, #5
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d106      	bne.n	800210c <HAL_RCC_OscConfig+0xb44>
 80020fe:	4b02      	ldr	r3, [pc, #8]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	e017      	b.n	8002134 <HAL_RCC_OscConfig+0xb6c>
 8002104:	40007000 	.word	0x40007000
 8002108:	40021000 	.word	0x40021000
 800210c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002110:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	4bb3      	ldr	r3, [pc, #716]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002138:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800213c:	2102      	movs	r1, #2
 800213e:	6011      	str	r1, [r2, #0]
 8002140:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002144:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	fa92 f1a2 	rbit	r1, r2
 800214e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002152:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002156:	6011      	str	r1, [r2, #0]
  return result;
 8002158:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800215c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d180      	bne.n	8002080 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800217e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002182:	2b01      	cmp	r3, #1
 8002184:	d105      	bne.n	8002192 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b9e      	ldr	r3, [pc, #632]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a9d      	ldr	r2, [pc, #628]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002190:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 825e 	beq.w	8002660 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a4:	4b96      	ldr	r3, [pc, #600]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	f000 821f 	beq.w	80025f0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	f040 8170 	bne.w	80024a4 <HAL_RCC_OscConfig+0xedc>
 80021c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021e8:	601a      	str	r2, [r3, #0]
  return result;
 80021ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021f2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	461a      	mov	r2, r3
 8002206:	2300      	movs	r3, #0
 8002208:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fd43 	bl	8000c94 <HAL_GetTick>
 800220e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	e009      	b.n	8002228 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fd3e 	bl	8000c94 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e21c      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 8002228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002230:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800224c:	601a      	str	r2, [r3, #0]
  return result;
 800224e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002252:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002256:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d102      	bne.n	8002272 <HAL_RCC_OscConfig+0xcaa>
 800226c:	4b64      	ldr	r3, [pc, #400]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	e027      	b.n	80022c2 <HAL_RCC_OscConfig+0xcfa>
 8002272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002276:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800227a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002284:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	fa93 f2a3 	rbit	r2, r3
 800228e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002292:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022aa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	4b50      	ldr	r3, [pc, #320]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ce:	6011      	str	r1, [r2, #0]
 80022d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	fa92 f1a2 	rbit	r1, r2
 80022de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022e2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80022e6:	6011      	str	r1, [r2, #0]
  return result;
 80022e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022ec:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fab2 f282 	clz	r2, r2
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f042 0220 	orr.w	r2, r2, #32
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f002 021f 	and.w	r2, r2, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d182      	bne.n	8002214 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230e:	4b3c      	ldr	r3, [pc, #240]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	4937      	ldr	r1, [pc, #220]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 8002324:	4313      	orrs	r3, r2
 8002326:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002328:	4b35      	ldr	r3, [pc, #212]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002334:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a19      	ldr	r1, [r3, #32]
 800233c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002340:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	430b      	orrs	r3, r1
 800234a:	492d      	ldr	r1, [pc, #180]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002354:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800235c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002362:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	fa93 f2a3 	rbit	r2, r3
 800236c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002370:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002374:	601a      	str	r2, [r3, #0]
  return result;
 8002376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800237e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800238a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	461a      	mov	r2, r3
 8002392:	2301      	movs	r3, #1
 8002394:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe fc7d 	bl	8000c94 <HAL_GetTick>
 800239a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239e:	e009      	b.n	80023b4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe fc78 	bl	8000c94 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e156      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 80023b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023d8:	601a      	str	r2, [r3, #0]
  return result;
 80023da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d105      	bne.n	8002404 <HAL_RCC_OscConfig+0xe3c>
 80023f8:	4b01      	ldr	r3, [pc, #4]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	e02a      	b.n	8002454 <HAL_RCC_OscConfig+0xe8c>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002408:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800240c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002416:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002424:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002432:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	4b86      	ldr	r3, [pc, #536]	; (800266c <HAL_RCC_OscConfig+0x10a4>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002458:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800245c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002460:	6011      	str	r1, [r2, #0]
 8002462:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002466:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	fa92 f1a2 	rbit	r1, r2
 8002470:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002474:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002478:	6011      	str	r1, [r2, #0]
  return result;
 800247a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800247e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f042 0220 	orr.w	r2, r2, #32
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	f43f af7f 	beq.w	80023a0 <HAL_RCC_OscConfig+0xdd8>
 80024a2:	e0dd      	b.n	8002660 <HAL_RCC_OscConfig+0x1098>
 80024a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fa93 f2a3 	rbit	r2, r3
 80024c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024c8:	601a      	str	r2, [r3, #0]
  return result;
 80024ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024d2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	461a      	mov	r2, r3
 80024e6:	2300      	movs	r3, #0
 80024e8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fbd3 	bl	8000c94 <HAL_GetTick>
 80024ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f2:	e009      	b.n	8002508 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fbce 	bl	8000c94 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e0ac      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 8002508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002528:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800252c:	601a      	str	r2, [r3, #0]
  return result;
 800252e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002532:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002536:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d102      	bne.n	8002552 <HAL_RCC_OscConfig+0xf8a>
 800254c:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_OscConfig+0x10a4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e027      	b.n	80025a2 <HAL_RCC_OscConfig+0xfda>
 8002552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002556:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800255a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800255e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002564:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002572:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	fa93 f2a3 	rbit	r2, r3
 8002594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002598:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	4b33      	ldr	r3, [pc, #204]	; (800266c <HAL_RCC_OscConfig+0x10a4>)
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025ae:	6011      	str	r1, [r2, #0]
 80025b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025b4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	fa92 f1a2 	rbit	r1, r2
 80025be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025c2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80025c6:	6011      	str	r1, [r2, #0]
  return result;
 80025c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025cc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	fab2 f282 	clz	r2, r2
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f042 0220 	orr.w	r2, r2, #32
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f002 021f 	and.w	r2, r2, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d182      	bne.n	80024f4 <HAL_RCC_OscConfig+0xf2c>
 80025ee:	e037      	b.n	8002660 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e02e      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_RCC_OscConfig+0x10a4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800260c:	4b17      	ldr	r3, [pc, #92]	; (800266c <HAL_RCC_OscConfig+0x10a4>)
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002614:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002618:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800261c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	429a      	cmp	r2, r3
 800262a:	d117      	bne.n	800265c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800262c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002630:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002638:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002640:	429a      	cmp	r2, r3
 8002642:	d10b      	bne.n	800265c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002644:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002648:	f003 020f 	and.w	r2, r3, #15
 800264c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002650:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000

08002670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b09e      	sub	sp, #120	; 0x78
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e162      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b90      	ldr	r3, [pc, #576]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d910      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b8d      	ldr	r3, [pc, #564]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0207 	bic.w	r2, r3, #7
 800269e:	498b      	ldr	r1, [pc, #556]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b89      	ldr	r3, [pc, #548]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e14a      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c4:	4b82      	ldr	r3, [pc, #520]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	497f      	ldr	r1, [pc, #508]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80dc 	beq.w	800289c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d13c      	bne.n	8002766 <HAL_RCC_ClockConfig+0xf6>
 80026ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	d102      	bne.n	8002716 <HAL_RCC_ClockConfig+0xa6>
 8002710:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	e00f      	b.n	8002736 <HAL_RCC_ClockConfig+0xc6>
 8002716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800271a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	667b      	str	r3, [r7, #100]	; 0x64
 8002724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002728:	663b      	str	r3, [r7, #96]	; 0x60
 800272a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800273a:	65ba      	str	r2, [r7, #88]	; 0x58
 800273c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800273e:	fa92 f2a2 	rbit	r2, r2
 8002742:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002746:	fab2 f282 	clz	r2, r2
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f042 0220 	orr.w	r2, r2, #32
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	f002 021f 	and.w	r2, r2, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d17b      	bne.n	800285a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0f3      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d13c      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x178>
 800276e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002772:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800277c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d102      	bne.n	8002798 <HAL_RCC_ClockConfig+0x128>
 8002792:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	e00f      	b.n	80027b8 <HAL_RCC_ClockConfig+0x148>
 8002798:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
 80027a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40
 80027ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b4:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80027be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c0:	fa92 f2a2 	rbit	r2, r2
 80027c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027c8:	fab2 f282 	clz	r2, r2
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f042 0220 	orr.w	r2, r2, #32
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f002 021f 	and.w	r2, r2, #31
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d13a      	bne.n	800285a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0b2      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
 80027e8:	2302      	movs	r3, #2
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_RCC_ClockConfig+0x1a0>
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	e00d      	b.n	800282c <HAL_RCC_ClockConfig+0x1bc>
 8002810:	2302      	movs	r3, #2
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
 800281c:	2302      	movs	r3, #2
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2202      	movs	r2, #2
 800282e:	61ba      	str	r2, [r7, #24]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	fa92 f2a2 	rbit	r2, r2
 8002836:	617a      	str	r2, [r7, #20]
  return result;
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	fab2 f282 	clz	r2, r2
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f042 0220 	orr.w	r2, r2, #32
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f002 021f 	and.w	r2, r2, #31
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f202 	lsl.w	r2, r1, r2
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e079      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f023 0203 	bic.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	491a      	ldr	r1, [pc, #104]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800286c:	f7fe fa12 	bl	8000c94 <HAL_GetTick>
 8002870:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	e00a      	b.n	800288a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002874:	f7fe fa0e 	bl	8000c94 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e061      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 020c 	and.w	r2, r3, #12
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	429a      	cmp	r2, r3
 800289a:	d1eb      	bne.n	8002874 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d214      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 0207 	bic.w	r2, r3, #7
 80028b2:	4906      	ldr	r1, [pc, #24]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e040      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
 80028cc:	40022000 	.word	0x40022000
 80028d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCC_ClockConfig+0x2e8>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	491a      	ldr	r1, [pc, #104]	; (8002958 <HAL_RCC_ClockConfig+0x2e8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <HAL_RCC_ClockConfig+0x2e8>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4912      	ldr	r1, [pc, #72]	; (8002958 <HAL_RCC_ClockConfig+0x2e8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002912:	f000 f829 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002916:	4601      	mov	r1, r0
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <HAL_RCC_ClockConfig+0x2e8>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002920:	22f0      	movs	r2, #240	; 0xf0
 8002922:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	fa92 f2a2 	rbit	r2, r2
 800292a:	60fa      	str	r2, [r7, #12]
  return result;
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	fab2 f282 	clz	r2, r2
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	40d3      	lsrs	r3, r2
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x2ec>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	fa21 f303 	lsr.w	r3, r1, r3
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <HAL_RCC_ClockConfig+0x2f0>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_RCC_ClockConfig+0x2f4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe f960 	bl	8000c0c <HAL_InitTick>
  
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3778      	adds	r7, #120	; 0x78
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	08004ba0 	.word	0x08004ba0
 8002960:	20000000 	.word	0x20000000
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	b08b      	sub	sp, #44	; 0x2c
 800296c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002982:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d002      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x30>
 8002992:	2b08      	cmp	r3, #8
 8002994:	d003      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x36>
 8002996:	e03f      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xc8>)
 800299a:	623b      	str	r3, [r7, #32]
      break;
 800299c:	e03f      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	fa92 f2a2 	rbit	r2, r2
 80029b0:	607a      	str	r2, [r7, #4]
  return result;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	fab2 f282 	clz	r2, r2
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	40d3      	lsrs	r3, r2
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xc4>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	220f      	movs	r2, #15
 80029cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	fa92 f2a2 	rbit	r2, r2
 80029d4:	60fa      	str	r2, [r7, #12]
  return result;
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	fab2 f282 	clz	r2, r2
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	40d3      	lsrs	r3, r2
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029f0:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002a00:	e007      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	623b      	str	r3, [r7, #32]
      break;
 8002a16:	e002      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a1a:	623b      	str	r3, [r7, #32]
      break;
 8002a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	372c      	adds	r7, #44	; 0x2c
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	007a1200 	.word	0x007a1200
 8002a34:	08004bb8 	.word	0x08004bb8
 8002a38:	08004bc8 	.word	0x08004bc8

08002a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000

08002a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a5a:	f7ff ffef 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002a5e:	4601      	mov	r1, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	fa92 f2a2 	rbit	r2, r2
 8002a74:	603a      	str	r2, [r7, #0]
  return result;
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	40d3      	lsrs	r3, r2
 8002a80:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	08004bb0 	.word	0x08004bb0

08002a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a9e:	f7ff ffcd 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002aac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ab0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	fa92 f2a2 	rbit	r2, r2
 8002ab8:	603a      	str	r2, [r7, #0]
  return result;
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	fab2 f282 	clz	r2, r2
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	40d3      	lsrs	r3, r2
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08004bb0 	.word	0x08004bb0

08002adc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b092      	sub	sp, #72	; 0x48
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80d4 	beq.w	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b00:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10e      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	4b4b      	ldr	r3, [pc, #300]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4a4a      	ldr	r2, [pc, #296]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b16:	61d3      	str	r3, [r2, #28]
 8002b18:	4b48      	ldr	r3, [pc, #288]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b45      	ldr	r3, [pc, #276]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d118      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b36:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a41      	ldr	r2, [pc, #260]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b42:	f7fe f8a7 	bl	8000c94 <HAL_GetTick>
 8002b46:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7fe f8a3 	bl	8000c94 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d901      	bls.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1d6      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b68:	4b34      	ldr	r3, [pc, #208]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8084 	beq.w	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d07c      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b88:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bda:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bde:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d04b      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7fe f853 	bl	8000c94 <HAL_GetTick>
 8002bee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe f84f 	bl	8000c94 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e180      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
 8002c14:	2302      	movs	r3, #2
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d108      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c36:	4b01      	ldr	r3, [pc, #4]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	e00d      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40007000 	.word	0x40007000
 8002c44:	10908100 	.word	0x10908100
 8002c48:	2302      	movs	r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	4b9a      	ldr	r3, [pc, #616]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2202      	movs	r2, #2
 8002c5a:	613a      	str	r2, [r7, #16]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	fa92 f2a2 	rbit	r2, r2
 8002c62:	60fa      	str	r2, [r7, #12]
  return result;
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	fab2 f282 	clz	r2, r2
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	f002 021f 	and.w	r2, r2, #31
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0b7      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c82:	4b8f      	ldr	r3, [pc, #572]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	498c      	ldr	r1, [pc, #560]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	4a87      	ldr	r2, [pc, #540]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb4:	4b82      	ldr	r3, [pc, #520]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	f023 0203 	bic.w	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	497f      	ldr	r1, [pc, #508]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd2:	4b7b      	ldr	r3, [pc, #492]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4978      	ldr	r1, [pc, #480]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cf0:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	4970      	ldr	r1, [pc, #448]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d0e:	4b6c      	ldr	r3, [pc, #432]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f023 0210 	bic.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4969      	ldr	r1, [pc, #420]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	4961      	ldr	r1, [pc, #388]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f023 0220 	bic.w	r2, r3, #32
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	495a      	ldr	r1, [pc, #360]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	4952      	ldr	r1, [pc, #328]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d86:	4b4e      	ldr	r3, [pc, #312]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	494b      	ldr	r1, [pc, #300]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002da4:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4943      	ldr	r1, [pc, #268]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	493c      	ldr	r1, [pc, #240]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002de0:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	4934      	ldr	r1, [pc, #208]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	492d      	ldr	r1, [pc, #180]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	4925      	ldr	r1, [pc, #148]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e3a:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	491e      	ldr	r1, [pc, #120]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	4916      	ldr	r1, [pc, #88]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	490f      	ldr	r1, [pc, #60]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	4907      	ldr	r1, [pc, #28]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00c      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002eb2:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	e002      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec6:	4913      	ldr	r1, [pc, #76]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee4:	490b      	ldr	r1, [pc, #44]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f02:	4904      	ldr	r1, [pc, #16]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3748      	adds	r7, #72	; 0x48
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e040      	b.n	8002fac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fd fcd8 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	; 0x24
 8002f44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f992 	bl	8003280 <UART_SetConfig>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e022      	b.n	8002fac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fb5c 	bl	800362c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fbe3 	bl	8003770 <UART_CheckIdleState>
 8002faa:	4603      	mov	r3, r0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	f040 8082 	bne.w	80030d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_UART_Transmit+0x26>
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07a      	b.n	80030d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_UART_Transmit+0x38>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e073      	b.n	80030d4 <HAL_UART_Transmit+0x120>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2221      	movs	r2, #33	; 0x21
 8003000:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003002:	f7fd fe47 	bl	8000c94 <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d108      	bne.n	8003034 <HAL_UART_Transmit+0x80>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e003      	b.n	800303c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003044:	e02d      	b.n	80030a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fbd6 	bl	8003802 <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e039      	b.n	80030d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	881a      	ldrh	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003072:	b292      	uxth	r2, r2
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	3302      	adds	r3, #2
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	e008      	b.n	8003090 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	b292      	uxth	r2, r2
 8003088:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3301      	adds	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1cb      	bne.n	8003046 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fba2 	bl	8003802 <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e005      	b.n	80030d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	f040 80bf 	bne.w	8003274 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_UART_Receive+0x26>
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0b7      	b.n	8003276 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_UART_Receive+0x38>
 8003110:	2302      	movs	r3, #2
 8003112:	e0b0      	b.n	8003276 <HAL_UART_Receive+0x19a>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2222      	movs	r2, #34	; 0x22
 8003128:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003130:	f7fd fdb0 	bl	8000c94 <HAL_GetTick>
 8003134:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	88fa      	ldrh	r2, [r7, #6]
 800313a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314e:	d10e      	bne.n	800316e <HAL_UART_Receive+0x92>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_UART_Receive+0x88>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800315e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003162:	e02d      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	22ff      	movs	r2, #255	; 0xff
 8003168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800316c:	e028      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <HAL_UART_Receive+0xb6>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d104      	bne.n	8003188 <HAL_UART_Receive+0xac>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003186:	e01b      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	227f      	movs	r2, #127	; 0x7f
 800318c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003190:	e016      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319a:	d10d      	bne.n	80031b8 <HAL_UART_Receive+0xdc>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_UART_Receive+0xd2>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	227f      	movs	r2, #127	; 0x7f
 80031a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031ac:	e008      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	223f      	movs	r2, #63	; 0x3f
 80031b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031b6:	e003      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031c6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d0:	d108      	bne.n	80031e4 <HAL_UART_Receive+0x108>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e003      	b.n	80031ec <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031f4:	e033      	b.n	800325e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2120      	movs	r1, #32
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fafe 	bl	8003802 <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e032      	b.n	8003276 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800321c:	b29a      	uxth	r2, r3
 800321e:	8a7b      	ldrh	r3, [r7, #18]
 8003220:	4013      	ands	r3, r2
 8003222:	b29a      	uxth	r2, r3
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	3302      	adds	r3, #2
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e00d      	b.n	800324c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003236:	b29b      	uxth	r3, r3
 8003238:	b2da      	uxtb	r2, r3
 800323a:	8a7b      	ldrh	r3, [r7, #18]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4013      	ands	r3, r2
 8003240:	b2da      	uxtb	r2, r3
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3301      	adds	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1c5      	bne.n	80031f6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b92      	ldr	r3, [pc, #584]	; (80034f4 <UART_SetConfig+0x274>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	6979      	ldr	r1, [r7, #20]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a80      	ldr	r2, [pc, #512]	; (80034f8 <UART_SetConfig+0x278>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d120      	bne.n	800333e <UART_SetConfig+0xbe>
 80032fc:	4b7f      	ldr	r3, [pc, #508]	; (80034fc <UART_SetConfig+0x27c>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b03      	cmp	r3, #3
 8003306:	d817      	bhi.n	8003338 <UART_SetConfig+0xb8>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <UART_SetConfig+0x90>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003321 	.word	0x08003321
 8003314:	0800332d 	.word	0x0800332d
 8003318:	08003333 	.word	0x08003333
 800331c:	08003327 	.word	0x08003327
 8003320:	2301      	movs	r3, #1
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e0b5      	b.n	8003492 <UART_SetConfig+0x212>
 8003326:	2302      	movs	r3, #2
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e0b2      	b.n	8003492 <UART_SetConfig+0x212>
 800332c:	2304      	movs	r3, #4
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e0af      	b.n	8003492 <UART_SetConfig+0x212>
 8003332:	2308      	movs	r3, #8
 8003334:	77fb      	strb	r3, [r7, #31]
 8003336:	e0ac      	b.n	8003492 <UART_SetConfig+0x212>
 8003338:	2310      	movs	r3, #16
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e0a9      	b.n	8003492 <UART_SetConfig+0x212>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6f      	ldr	r2, [pc, #444]	; (8003500 <UART_SetConfig+0x280>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d124      	bne.n	8003392 <UART_SetConfig+0x112>
 8003348:	4b6c      	ldr	r3, [pc, #432]	; (80034fc <UART_SetConfig+0x27c>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003350:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003354:	d011      	beq.n	800337a <UART_SetConfig+0xfa>
 8003356:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800335a:	d817      	bhi.n	800338c <UART_SetConfig+0x10c>
 800335c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003360:	d011      	beq.n	8003386 <UART_SetConfig+0x106>
 8003362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003366:	d811      	bhi.n	800338c <UART_SetConfig+0x10c>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <UART_SetConfig+0xf4>
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d006      	beq.n	8003380 <UART_SetConfig+0x100>
 8003372:	e00b      	b.n	800338c <UART_SetConfig+0x10c>
 8003374:	2300      	movs	r3, #0
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e08b      	b.n	8003492 <UART_SetConfig+0x212>
 800337a:	2302      	movs	r3, #2
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e088      	b.n	8003492 <UART_SetConfig+0x212>
 8003380:	2304      	movs	r3, #4
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e085      	b.n	8003492 <UART_SetConfig+0x212>
 8003386:	2308      	movs	r3, #8
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e082      	b.n	8003492 <UART_SetConfig+0x212>
 800338c:	2310      	movs	r3, #16
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e07f      	b.n	8003492 <UART_SetConfig+0x212>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5b      	ldr	r2, [pc, #364]	; (8003504 <UART_SetConfig+0x284>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d124      	bne.n	80033e6 <UART_SetConfig+0x166>
 800339c:	4b57      	ldr	r3, [pc, #348]	; (80034fc <UART_SetConfig+0x27c>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80033a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033a8:	d011      	beq.n	80033ce <UART_SetConfig+0x14e>
 80033aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033ae:	d817      	bhi.n	80033e0 <UART_SetConfig+0x160>
 80033b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033b4:	d011      	beq.n	80033da <UART_SetConfig+0x15a>
 80033b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033ba:	d811      	bhi.n	80033e0 <UART_SetConfig+0x160>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <UART_SetConfig+0x148>
 80033c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033c4:	d006      	beq.n	80033d4 <UART_SetConfig+0x154>
 80033c6:	e00b      	b.n	80033e0 <UART_SetConfig+0x160>
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e061      	b.n	8003492 <UART_SetConfig+0x212>
 80033ce:	2302      	movs	r3, #2
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e05e      	b.n	8003492 <UART_SetConfig+0x212>
 80033d4:	2304      	movs	r3, #4
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e05b      	b.n	8003492 <UART_SetConfig+0x212>
 80033da:	2308      	movs	r3, #8
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e058      	b.n	8003492 <UART_SetConfig+0x212>
 80033e0:	2310      	movs	r3, #16
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e055      	b.n	8003492 <UART_SetConfig+0x212>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a47      	ldr	r2, [pc, #284]	; (8003508 <UART_SetConfig+0x288>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d124      	bne.n	800343a <UART_SetConfig+0x1ba>
 80033f0:	4b42      	ldr	r3, [pc, #264]	; (80034fc <UART_SetConfig+0x27c>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033fc:	d011      	beq.n	8003422 <UART_SetConfig+0x1a2>
 80033fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003402:	d817      	bhi.n	8003434 <UART_SetConfig+0x1b4>
 8003404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003408:	d011      	beq.n	800342e <UART_SetConfig+0x1ae>
 800340a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800340e:	d811      	bhi.n	8003434 <UART_SetConfig+0x1b4>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <UART_SetConfig+0x19c>
 8003414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003418:	d006      	beq.n	8003428 <UART_SetConfig+0x1a8>
 800341a:	e00b      	b.n	8003434 <UART_SetConfig+0x1b4>
 800341c:	2300      	movs	r3, #0
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e037      	b.n	8003492 <UART_SetConfig+0x212>
 8003422:	2302      	movs	r3, #2
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e034      	b.n	8003492 <UART_SetConfig+0x212>
 8003428:	2304      	movs	r3, #4
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e031      	b.n	8003492 <UART_SetConfig+0x212>
 800342e:	2308      	movs	r3, #8
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	e02e      	b.n	8003492 <UART_SetConfig+0x212>
 8003434:	2310      	movs	r3, #16
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e02b      	b.n	8003492 <UART_SetConfig+0x212>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a33      	ldr	r2, [pc, #204]	; (800350c <UART_SetConfig+0x28c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d124      	bne.n	800348e <UART_SetConfig+0x20e>
 8003444:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <UART_SetConfig+0x27c>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800344c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003450:	d011      	beq.n	8003476 <UART_SetConfig+0x1f6>
 8003452:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003456:	d817      	bhi.n	8003488 <UART_SetConfig+0x208>
 8003458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800345c:	d011      	beq.n	8003482 <UART_SetConfig+0x202>
 800345e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003462:	d811      	bhi.n	8003488 <UART_SetConfig+0x208>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <UART_SetConfig+0x1f0>
 8003468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346c:	d006      	beq.n	800347c <UART_SetConfig+0x1fc>
 800346e:	e00b      	b.n	8003488 <UART_SetConfig+0x208>
 8003470:	2300      	movs	r3, #0
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e00d      	b.n	8003492 <UART_SetConfig+0x212>
 8003476:	2302      	movs	r3, #2
 8003478:	77fb      	strb	r3, [r7, #31]
 800347a:	e00a      	b.n	8003492 <UART_SetConfig+0x212>
 800347c:	2304      	movs	r3, #4
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	e007      	b.n	8003492 <UART_SetConfig+0x212>
 8003482:	2308      	movs	r3, #8
 8003484:	77fb      	strb	r3, [r7, #31]
 8003486:	e004      	b.n	8003492 <UART_SetConfig+0x212>
 8003488:	2310      	movs	r3, #16
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e001      	b.n	8003492 <UART_SetConfig+0x212>
 800348e:	2310      	movs	r3, #16
 8003490:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349a:	d16c      	bne.n	8003576 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800349c:	7ffb      	ldrb	r3, [r7, #31]
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d838      	bhi.n	8003514 <UART_SetConfig+0x294>
 80034a2:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0x228>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	080034d5 	.word	0x080034d5
 80034b0:	080034dd 	.word	0x080034dd
 80034b4:	08003515 	.word	0x08003515
 80034b8:	080034e3 	.word	0x080034e3
 80034bc:	08003515 	.word	0x08003515
 80034c0:	08003515 	.word	0x08003515
 80034c4:	08003515 	.word	0x08003515
 80034c8:	080034eb 	.word	0x080034eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034cc:	f7ff fac2 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 80034d0:	61b8      	str	r0, [r7, #24]
        break;
 80034d2:	e024      	b.n	800351e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7ff fae0 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 80034d8:	61b8      	str	r0, [r7, #24]
        break;
 80034da:	e020      	b.n	800351e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <UART_SetConfig+0x290>)
 80034de:	61bb      	str	r3, [r7, #24]
        break;
 80034e0:	e01d      	b.n	800351e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e2:	f7ff fa41 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 80034e6:	61b8      	str	r0, [r7, #24]
        break;
 80034e8:	e019      	b.n	800351e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ee:	61bb      	str	r3, [r7, #24]
        break;
 80034f0:	e015      	b.n	800351e <UART_SetConfig+0x29e>
 80034f2:	bf00      	nop
 80034f4:	efff69f3 	.word	0xefff69f3
 80034f8:	40013800 	.word	0x40013800
 80034fc:	40021000 	.word	0x40021000
 8003500:	40004400 	.word	0x40004400
 8003504:	40004800 	.word	0x40004800
 8003508:	40004c00 	.word	0x40004c00
 800350c:	40005000 	.word	0x40005000
 8003510:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	77bb      	strb	r3, [r7, #30]
        break;
 800351c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d075      	beq.n	8003610 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	005a      	lsls	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	441a      	add	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	b29b      	uxth	r3, r3
 800353a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b0f      	cmp	r3, #15
 8003540:	d916      	bls.n	8003570 <UART_SetConfig+0x2f0>
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d212      	bcs.n	8003570 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f023 030f 	bic.w	r3, r3, #15
 8003552:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	b29b      	uxth	r3, r3
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	b29a      	uxth	r2, r3
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	4313      	orrs	r3, r2
 8003564:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	89fa      	ldrh	r2, [r7, #14]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	e04f      	b.n	8003610 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	77bb      	strb	r3, [r7, #30]
 8003574:	e04c      	b.n	8003610 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d828      	bhi.n	80035ce <UART_SetConfig+0x34e>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <UART_SetConfig+0x304>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	080035a9 	.word	0x080035a9
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035b9 	.word	0x080035b9
 8003590:	080035cf 	.word	0x080035cf
 8003594:	080035bf 	.word	0x080035bf
 8003598:	080035cf 	.word	0x080035cf
 800359c:	080035cf 	.word	0x080035cf
 80035a0:	080035cf 	.word	0x080035cf
 80035a4:	080035c7 	.word	0x080035c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a8:	f7ff fa54 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 80035ac:	61b8      	str	r0, [r7, #24]
        break;
 80035ae:	e013      	b.n	80035d8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b0:	f7ff fa72 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 80035b4:	61b8      	str	r0, [r7, #24]
        break;
 80035b6:	e00f      	b.n	80035d8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <UART_SetConfig+0x3a8>)
 80035ba:	61bb      	str	r3, [r7, #24]
        break;
 80035bc:	e00c      	b.n	80035d8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7ff f9d3 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 80035c2:	61b8      	str	r0, [r7, #24]
        break;
 80035c4:	e008      	b.n	80035d8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ca:	61bb      	str	r3, [r7, #24]
        break;
 80035cc:	e004      	b.n	80035d8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	77bb      	strb	r3, [r7, #30]
        break;
 80035d6:	bf00      	nop
    }

    if (pclk != 0U)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d018      	beq.n	8003610 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	085a      	lsrs	r2, r3, #1
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	441a      	add	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	d908      	bls.n	800360c <UART_SetConfig+0x38c>
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d204      	bcs.n	800360c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	e001      	b.n	8003610 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800361c:	7fbb      	ldrb	r3, [r7, #30]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	007a1200 	.word	0x007a1200

0800362c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01a      	beq.n	8003742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372a:	d10a      	bne.n	8003742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  }
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af02      	add	r7, sp, #8
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003780:	f7fd fa88 	bl	8000c94 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b08      	cmp	r3, #8
 8003792:	d10e      	bne.n	80037b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f82d 	bl	8003802 <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e023      	b.n	80037fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d10e      	bne.n	80037de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f817 	bl	8003802 <UART_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e00d      	b.n	80037fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b09c      	sub	sp, #112	; 0x70
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	4613      	mov	r3, r2
 8003810:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003812:	e0a5      	b.n	8003960 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	f000 80a1 	beq.w	8003960 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381e:	f7fd fa39 	bl	8000c94 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <UART_WaitOnFlagUntilTimeout+0x32>
 800382e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003830:	2b00      	cmp	r3, #0
 8003832:	d13e      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003844:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003848:	667b      	str	r3, [r7, #100]	; 0x64
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003854:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003858:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e6      	bne.n	8003834 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3308      	adds	r3, #8
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	663b      	str	r3, [r7, #96]	; 0x60
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3308      	adds	r3, #8
 8003884:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003886:	64ba      	str	r2, [r7, #72]	; 0x48
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800388c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e5      	bne.n	8003866 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e067      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d04f      	beq.n	8003960 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ce:	d147      	bne.n	8003960 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
 80038fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e6      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	613b      	str	r3, [r7, #16]
   return(result);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	66bb      	str	r3, [r7, #104]	; 0x68
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3308      	adds	r3, #8
 800392a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800392c:	623a      	str	r2, [r7, #32]
 800392e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	69f9      	ldr	r1, [r7, #28]
 8003932:	6a3a      	ldr	r2, [r7, #32]
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	61bb      	str	r3, [r7, #24]
   return(result);
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e5      	bne.n	800390c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e010      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4013      	ands	r3, r2
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	429a      	cmp	r2, r3
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	429a      	cmp	r2, r3
 800397c:	f43f af4a 	beq.w	8003814 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3770      	adds	r7, #112	; 0x70
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <_ZdaPv>:
 800398a:	f000 b802 	b.w	8003992 <_ZdlPv>

0800398e <_Znaj>:
 800398e:	f000 b802 	b.w	8003996 <_Znwj>

08003992 <_ZdlPv>:
 8003992:	f000 b853 	b.w	8003a3c <free>

08003996 <_Znwj>:
 8003996:	2801      	cmp	r0, #1
 8003998:	bf38      	it	cc
 800399a:	2001      	movcc	r0, #1
 800399c:	b510      	push	{r4, lr}
 800399e:	4604      	mov	r4, r0
 80039a0:	4620      	mov	r0, r4
 80039a2:	f000 f843 	bl	8003a2c <malloc>
 80039a6:	b930      	cbnz	r0, 80039b6 <_Znwj+0x20>
 80039a8:	f000 f806 	bl	80039b8 <_ZSt15get_new_handlerv>
 80039ac:	b908      	cbnz	r0, 80039b2 <_Znwj+0x1c>
 80039ae:	f000 f80b 	bl	80039c8 <abort>
 80039b2:	4780      	blx	r0
 80039b4:	e7f4      	b.n	80039a0 <_Znwj+0xa>
 80039b6:	bd10      	pop	{r4, pc}

080039b8 <_ZSt15get_new_handlerv>:
 80039b8:	4b02      	ldr	r3, [pc, #8]	; (80039c4 <_ZSt15get_new_handlerv+0xc>)
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	f3bf 8f5b 	dmb	ish
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000148 	.word	0x20000148

080039c8 <abort>:
 80039c8:	b508      	push	{r3, lr}
 80039ca:	2006      	movs	r0, #6
 80039cc:	f000 f9ec 	bl	8003da8 <raise>
 80039d0:	2001      	movs	r0, #1
 80039d2:	f7fd f811 	bl	80009f8 <_exit>
	...

080039d8 <__errno>:
 80039d8:	4b01      	ldr	r3, [pc, #4]	; (80039e0 <__errno+0x8>)
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	2000000c 	.word	0x2000000c

080039e4 <__libc_init_array>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	4d0d      	ldr	r5, [pc, #52]	; (8003a1c <__libc_init_array+0x38>)
 80039e8:	4c0d      	ldr	r4, [pc, #52]	; (8003a20 <__libc_init_array+0x3c>)
 80039ea:	1b64      	subs	r4, r4, r5
 80039ec:	10a4      	asrs	r4, r4, #2
 80039ee:	2600      	movs	r6, #0
 80039f0:	42a6      	cmp	r6, r4
 80039f2:	d109      	bne.n	8003a08 <__libc_init_array+0x24>
 80039f4:	4d0b      	ldr	r5, [pc, #44]	; (8003a24 <__libc_init_array+0x40>)
 80039f6:	4c0c      	ldr	r4, [pc, #48]	; (8003a28 <__libc_init_array+0x44>)
 80039f8:	f001 f878 	bl	8004aec <_init>
 80039fc:	1b64      	subs	r4, r4, r5
 80039fe:	10a4      	asrs	r4, r4, #2
 8003a00:	2600      	movs	r6, #0
 8003a02:	42a6      	cmp	r6, r4
 8003a04:	d105      	bne.n	8003a12 <__libc_init_array+0x2e>
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
 8003a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0c:	4798      	blx	r3
 8003a0e:	3601      	adds	r6, #1
 8003a10:	e7ee      	b.n	80039f0 <__libc_init_array+0xc>
 8003a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a16:	4798      	blx	r3
 8003a18:	3601      	adds	r6, #1
 8003a1a:	e7f2      	b.n	8003a02 <__libc_init_array+0x1e>
 8003a1c:	08004c70 	.word	0x08004c70
 8003a20:	08004c70 	.word	0x08004c70
 8003a24:	08004c70 	.word	0x08004c70
 8003a28:	08004c74 	.word	0x08004c74

08003a2c <malloc>:
 8003a2c:	4b02      	ldr	r3, [pc, #8]	; (8003a38 <malloc+0xc>)
 8003a2e:	4601      	mov	r1, r0
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	f000 b87f 	b.w	8003b34 <_malloc_r>
 8003a36:	bf00      	nop
 8003a38:	2000000c 	.word	0x2000000c

08003a3c <free>:
 8003a3c:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <free+0xc>)
 8003a3e:	4601      	mov	r1, r0
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f000 b80b 	b.w	8003a5c <_free_r>
 8003a46:	bf00      	nop
 8003a48:	2000000c 	.word	0x2000000c

08003a4c <memset>:
 8003a4c:	4402      	add	r2, r0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d100      	bne.n	8003a56 <memset+0xa>
 8003a54:	4770      	bx	lr
 8003a56:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5a:	e7f9      	b.n	8003a50 <memset+0x4>

08003a5c <_free_r>:
 8003a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a5e:	2900      	cmp	r1, #0
 8003a60:	d044      	beq.n	8003aec <_free_r+0x90>
 8003a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a66:	9001      	str	r0, [sp, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8003a6e:	bfb8      	it	lt
 8003a70:	18e4      	addlt	r4, r4, r3
 8003a72:	f000 fc95 	bl	80043a0 <__malloc_lock>
 8003a76:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <_free_r+0x94>)
 8003a78:	9801      	ldr	r0, [sp, #4]
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	b933      	cbnz	r3, 8003a8c <_free_r+0x30>
 8003a7e:	6063      	str	r3, [r4, #4]
 8003a80:	6014      	str	r4, [r2, #0]
 8003a82:	b003      	add	sp, #12
 8003a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a88:	f000 bc90 	b.w	80043ac <__malloc_unlock>
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	d908      	bls.n	8003aa2 <_free_r+0x46>
 8003a90:	6825      	ldr	r5, [r4, #0]
 8003a92:	1961      	adds	r1, r4, r5
 8003a94:	428b      	cmp	r3, r1
 8003a96:	bf01      	itttt	eq
 8003a98:	6819      	ldreq	r1, [r3, #0]
 8003a9a:	685b      	ldreq	r3, [r3, #4]
 8003a9c:	1949      	addeq	r1, r1, r5
 8003a9e:	6021      	streq	r1, [r4, #0]
 8003aa0:	e7ed      	b.n	8003a7e <_free_r+0x22>
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b10b      	cbz	r3, 8003aac <_free_r+0x50>
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	d9fa      	bls.n	8003aa2 <_free_r+0x46>
 8003aac:	6811      	ldr	r1, [r2, #0]
 8003aae:	1855      	adds	r5, r2, r1
 8003ab0:	42a5      	cmp	r5, r4
 8003ab2:	d10b      	bne.n	8003acc <_free_r+0x70>
 8003ab4:	6824      	ldr	r4, [r4, #0]
 8003ab6:	4421      	add	r1, r4
 8003ab8:	1854      	adds	r4, r2, r1
 8003aba:	42a3      	cmp	r3, r4
 8003abc:	6011      	str	r1, [r2, #0]
 8003abe:	d1e0      	bne.n	8003a82 <_free_r+0x26>
 8003ac0:	681c      	ldr	r4, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	6053      	str	r3, [r2, #4]
 8003ac6:	4421      	add	r1, r4
 8003ac8:	6011      	str	r1, [r2, #0]
 8003aca:	e7da      	b.n	8003a82 <_free_r+0x26>
 8003acc:	d902      	bls.n	8003ad4 <_free_r+0x78>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	6003      	str	r3, [r0, #0]
 8003ad2:	e7d6      	b.n	8003a82 <_free_r+0x26>
 8003ad4:	6825      	ldr	r5, [r4, #0]
 8003ad6:	1961      	adds	r1, r4, r5
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	bf04      	itt	eq
 8003adc:	6819      	ldreq	r1, [r3, #0]
 8003ade:	685b      	ldreq	r3, [r3, #4]
 8003ae0:	6063      	str	r3, [r4, #4]
 8003ae2:	bf04      	itt	eq
 8003ae4:	1949      	addeq	r1, r1, r5
 8003ae6:	6021      	streq	r1, [r4, #0]
 8003ae8:	6054      	str	r4, [r2, #4]
 8003aea:	e7ca      	b.n	8003a82 <_free_r+0x26>
 8003aec:	b003      	add	sp, #12
 8003aee:	bd30      	pop	{r4, r5, pc}
 8003af0:	2000014c 	.word	0x2000014c

08003af4 <sbrk_aligned>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4e0e      	ldr	r6, [pc, #56]	; (8003b30 <sbrk_aligned+0x3c>)
 8003af8:	460c      	mov	r4, r1
 8003afa:	6831      	ldr	r1, [r6, #0]
 8003afc:	4605      	mov	r5, r0
 8003afe:	b911      	cbnz	r1, 8003b06 <sbrk_aligned+0x12>
 8003b00:	f000 f91a 	bl	8003d38 <_sbrk_r>
 8003b04:	6030      	str	r0, [r6, #0]
 8003b06:	4621      	mov	r1, r4
 8003b08:	4628      	mov	r0, r5
 8003b0a:	f000 f915 	bl	8003d38 <_sbrk_r>
 8003b0e:	1c43      	adds	r3, r0, #1
 8003b10:	d00a      	beq.n	8003b28 <sbrk_aligned+0x34>
 8003b12:	1cc4      	adds	r4, r0, #3
 8003b14:	f024 0403 	bic.w	r4, r4, #3
 8003b18:	42a0      	cmp	r0, r4
 8003b1a:	d007      	beq.n	8003b2c <sbrk_aligned+0x38>
 8003b1c:	1a21      	subs	r1, r4, r0
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f000 f90a 	bl	8003d38 <_sbrk_r>
 8003b24:	3001      	adds	r0, #1
 8003b26:	d101      	bne.n	8003b2c <sbrk_aligned+0x38>
 8003b28:	f04f 34ff 	mov.w	r4, #4294967295
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	20000150 	.word	0x20000150

08003b34 <_malloc_r>:
 8003b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b38:	1ccd      	adds	r5, r1, #3
 8003b3a:	f025 0503 	bic.w	r5, r5, #3
 8003b3e:	3508      	adds	r5, #8
 8003b40:	2d0c      	cmp	r5, #12
 8003b42:	bf38      	it	cc
 8003b44:	250c      	movcc	r5, #12
 8003b46:	2d00      	cmp	r5, #0
 8003b48:	4607      	mov	r7, r0
 8003b4a:	db01      	blt.n	8003b50 <_malloc_r+0x1c>
 8003b4c:	42a9      	cmp	r1, r5
 8003b4e:	d905      	bls.n	8003b5c <_malloc_r+0x28>
 8003b50:	230c      	movs	r3, #12
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	2600      	movs	r6, #0
 8003b56:	4630      	mov	r0, r6
 8003b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b5c:	4e2e      	ldr	r6, [pc, #184]	; (8003c18 <_malloc_r+0xe4>)
 8003b5e:	f000 fc1f 	bl	80043a0 <__malloc_lock>
 8003b62:	6833      	ldr	r3, [r6, #0]
 8003b64:	461c      	mov	r4, r3
 8003b66:	bb34      	cbnz	r4, 8003bb6 <_malloc_r+0x82>
 8003b68:	4629      	mov	r1, r5
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	f7ff ffc2 	bl	8003af4 <sbrk_aligned>
 8003b70:	1c43      	adds	r3, r0, #1
 8003b72:	4604      	mov	r4, r0
 8003b74:	d14d      	bne.n	8003c12 <_malloc_r+0xde>
 8003b76:	6834      	ldr	r4, [r6, #0]
 8003b78:	4626      	mov	r6, r4
 8003b7a:	2e00      	cmp	r6, #0
 8003b7c:	d140      	bne.n	8003c00 <_malloc_r+0xcc>
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	4631      	mov	r1, r6
 8003b82:	4638      	mov	r0, r7
 8003b84:	eb04 0803 	add.w	r8, r4, r3
 8003b88:	f000 f8d6 	bl	8003d38 <_sbrk_r>
 8003b8c:	4580      	cmp	r8, r0
 8003b8e:	d13a      	bne.n	8003c06 <_malloc_r+0xd2>
 8003b90:	6821      	ldr	r1, [r4, #0]
 8003b92:	3503      	adds	r5, #3
 8003b94:	1a6d      	subs	r5, r5, r1
 8003b96:	f025 0503 	bic.w	r5, r5, #3
 8003b9a:	3508      	adds	r5, #8
 8003b9c:	2d0c      	cmp	r5, #12
 8003b9e:	bf38      	it	cc
 8003ba0:	250c      	movcc	r5, #12
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	4638      	mov	r0, r7
 8003ba6:	f7ff ffa5 	bl	8003af4 <sbrk_aligned>
 8003baa:	3001      	adds	r0, #1
 8003bac:	d02b      	beq.n	8003c06 <_malloc_r+0xd2>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	442b      	add	r3, r5
 8003bb2:	6023      	str	r3, [r4, #0]
 8003bb4:	e00e      	b.n	8003bd4 <_malloc_r+0xa0>
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	1b52      	subs	r2, r2, r5
 8003bba:	d41e      	bmi.n	8003bfa <_malloc_r+0xc6>
 8003bbc:	2a0b      	cmp	r2, #11
 8003bbe:	d916      	bls.n	8003bee <_malloc_r+0xba>
 8003bc0:	1961      	adds	r1, r4, r5
 8003bc2:	42a3      	cmp	r3, r4
 8003bc4:	6025      	str	r5, [r4, #0]
 8003bc6:	bf18      	it	ne
 8003bc8:	6059      	strne	r1, [r3, #4]
 8003bca:	6863      	ldr	r3, [r4, #4]
 8003bcc:	bf08      	it	eq
 8003bce:	6031      	streq	r1, [r6, #0]
 8003bd0:	5162      	str	r2, [r4, r5]
 8003bd2:	604b      	str	r3, [r1, #4]
 8003bd4:	4638      	mov	r0, r7
 8003bd6:	f104 060b 	add.w	r6, r4, #11
 8003bda:	f000 fbe7 	bl	80043ac <__malloc_unlock>
 8003bde:	f026 0607 	bic.w	r6, r6, #7
 8003be2:	1d23      	adds	r3, r4, #4
 8003be4:	1af2      	subs	r2, r6, r3
 8003be6:	d0b6      	beq.n	8003b56 <_malloc_r+0x22>
 8003be8:	1b9b      	subs	r3, r3, r6
 8003bea:	50a3      	str	r3, [r4, r2]
 8003bec:	e7b3      	b.n	8003b56 <_malloc_r+0x22>
 8003bee:	6862      	ldr	r2, [r4, #4]
 8003bf0:	42a3      	cmp	r3, r4
 8003bf2:	bf0c      	ite	eq
 8003bf4:	6032      	streq	r2, [r6, #0]
 8003bf6:	605a      	strne	r2, [r3, #4]
 8003bf8:	e7ec      	b.n	8003bd4 <_malloc_r+0xa0>
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	6864      	ldr	r4, [r4, #4]
 8003bfe:	e7b2      	b.n	8003b66 <_malloc_r+0x32>
 8003c00:	4634      	mov	r4, r6
 8003c02:	6876      	ldr	r6, [r6, #4]
 8003c04:	e7b9      	b.n	8003b7a <_malloc_r+0x46>
 8003c06:	230c      	movs	r3, #12
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f000 fbce 	bl	80043ac <__malloc_unlock>
 8003c10:	e7a1      	b.n	8003b56 <_malloc_r+0x22>
 8003c12:	6025      	str	r5, [r4, #0]
 8003c14:	e7de      	b.n	8003bd4 <_malloc_r+0xa0>
 8003c16:	bf00      	nop
 8003c18:	2000014c 	.word	0x2000014c

08003c1c <iprintf>:
 8003c1c:	b40f      	push	{r0, r1, r2, r3}
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <iprintf+0x2c>)
 8003c20:	b513      	push	{r0, r1, r4, lr}
 8003c22:	681c      	ldr	r4, [r3, #0]
 8003c24:	b124      	cbz	r4, 8003c30 <iprintf+0x14>
 8003c26:	69a3      	ldr	r3, [r4, #24]
 8003c28:	b913      	cbnz	r3, 8003c30 <iprintf+0x14>
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f000 fab2 	bl	8004194 <__sinit>
 8003c30:	ab05      	add	r3, sp, #20
 8003c32:	9a04      	ldr	r2, [sp, #16]
 8003c34:	68a1      	ldr	r1, [r4, #8]
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f000 fbe7 	bl	800440c <_vfiprintf_r>
 8003c3e:	b002      	add	sp, #8
 8003c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c44:	b004      	add	sp, #16
 8003c46:	4770      	bx	lr
 8003c48:	2000000c 	.word	0x2000000c

08003c4c <_puts_r>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	460e      	mov	r6, r1
 8003c50:	4605      	mov	r5, r0
 8003c52:	b118      	cbz	r0, 8003c5c <_puts_r+0x10>
 8003c54:	6983      	ldr	r3, [r0, #24]
 8003c56:	b90b      	cbnz	r3, 8003c5c <_puts_r+0x10>
 8003c58:	f000 fa9c 	bl	8004194 <__sinit>
 8003c5c:	69ab      	ldr	r3, [r5, #24]
 8003c5e:	68ac      	ldr	r4, [r5, #8]
 8003c60:	b913      	cbnz	r3, 8003c68 <_puts_r+0x1c>
 8003c62:	4628      	mov	r0, r5
 8003c64:	f000 fa96 	bl	8004194 <__sinit>
 8003c68:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <_puts_r+0xd0>)
 8003c6a:	429c      	cmp	r4, r3
 8003c6c:	d120      	bne.n	8003cb0 <_puts_r+0x64>
 8003c6e:	686c      	ldr	r4, [r5, #4]
 8003c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c72:	07db      	lsls	r3, r3, #31
 8003c74:	d405      	bmi.n	8003c82 <_puts_r+0x36>
 8003c76:	89a3      	ldrh	r3, [r4, #12]
 8003c78:	0598      	lsls	r0, r3, #22
 8003c7a:	d402      	bmi.n	8003c82 <_puts_r+0x36>
 8003c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c7e:	f000 fb27 	bl	80042d0 <__retarget_lock_acquire_recursive>
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	0719      	lsls	r1, r3, #28
 8003c86:	d51d      	bpl.n	8003cc4 <_puts_r+0x78>
 8003c88:	6923      	ldr	r3, [r4, #16]
 8003c8a:	b1db      	cbz	r3, 8003cc4 <_puts_r+0x78>
 8003c8c:	3e01      	subs	r6, #1
 8003c8e:	68a3      	ldr	r3, [r4, #8]
 8003c90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c94:	3b01      	subs	r3, #1
 8003c96:	60a3      	str	r3, [r4, #8]
 8003c98:	bb39      	cbnz	r1, 8003cea <_puts_r+0x9e>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	da38      	bge.n	8003d10 <_puts_r+0xc4>
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	210a      	movs	r1, #10
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f000 f89c 	bl	8003de0 <__swbuf_r>
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d011      	beq.n	8003cd0 <_puts_r+0x84>
 8003cac:	250a      	movs	r5, #10
 8003cae:	e011      	b.n	8003cd4 <_puts_r+0x88>
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <_puts_r+0xd4>)
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	d101      	bne.n	8003cba <_puts_r+0x6e>
 8003cb6:	68ac      	ldr	r4, [r5, #8]
 8003cb8:	e7da      	b.n	8003c70 <_puts_r+0x24>
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <_puts_r+0xd8>)
 8003cbc:	429c      	cmp	r4, r3
 8003cbe:	bf08      	it	eq
 8003cc0:	68ec      	ldreq	r4, [r5, #12]
 8003cc2:	e7d5      	b.n	8003c70 <_puts_r+0x24>
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 f8dc 	bl	8003e84 <__swsetup_r>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d0dd      	beq.n	8003c8c <_puts_r+0x40>
 8003cd0:	f04f 35ff 	mov.w	r5, #4294967295
 8003cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cd6:	07da      	lsls	r2, r3, #31
 8003cd8:	d405      	bmi.n	8003ce6 <_puts_r+0x9a>
 8003cda:	89a3      	ldrh	r3, [r4, #12]
 8003cdc:	059b      	lsls	r3, r3, #22
 8003cde:	d402      	bmi.n	8003ce6 <_puts_r+0x9a>
 8003ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce2:	f000 faf6 	bl	80042d2 <__retarget_lock_release_recursive>
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	da04      	bge.n	8003cf8 <_puts_r+0xac>
 8003cee:	69a2      	ldr	r2, [r4, #24]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	dc06      	bgt.n	8003d02 <_puts_r+0xb6>
 8003cf4:	290a      	cmp	r1, #10
 8003cf6:	d004      	beq.n	8003d02 <_puts_r+0xb6>
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	6022      	str	r2, [r4, #0]
 8003cfe:	7019      	strb	r1, [r3, #0]
 8003d00:	e7c5      	b.n	8003c8e <_puts_r+0x42>
 8003d02:	4622      	mov	r2, r4
 8003d04:	4628      	mov	r0, r5
 8003d06:	f000 f86b 	bl	8003de0 <__swbuf_r>
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	d1bf      	bne.n	8003c8e <_puts_r+0x42>
 8003d0e:	e7df      	b.n	8003cd0 <_puts_r+0x84>
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	250a      	movs	r5, #10
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	6022      	str	r2, [r4, #0]
 8003d18:	701d      	strb	r5, [r3, #0]
 8003d1a:	e7db      	b.n	8003cd4 <_puts_r+0x88>
 8003d1c:	08004bfc 	.word	0x08004bfc
 8003d20:	08004c1c 	.word	0x08004c1c
 8003d24:	08004bdc 	.word	0x08004bdc

08003d28 <puts>:
 8003d28:	4b02      	ldr	r3, [pc, #8]	; (8003d34 <puts+0xc>)
 8003d2a:	4601      	mov	r1, r0
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	f7ff bf8d 	b.w	8003c4c <_puts_r>
 8003d32:	bf00      	nop
 8003d34:	2000000c 	.word	0x2000000c

08003d38 <_sbrk_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4d06      	ldr	r5, [pc, #24]	; (8003d54 <_sbrk_r+0x1c>)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4608      	mov	r0, r1
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	f7fc feb4 	bl	8000ab0 <_sbrk>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d102      	bne.n	8003d52 <_sbrk_r+0x1a>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	b103      	cbz	r3, 8003d52 <_sbrk_r+0x1a>
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	20000158 	.word	0x20000158

08003d58 <_raise_r>:
 8003d58:	291f      	cmp	r1, #31
 8003d5a:	b538      	push	{r3, r4, r5, lr}
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	460d      	mov	r5, r1
 8003d60:	d904      	bls.n	8003d6c <_raise_r+0x14>
 8003d62:	2316      	movs	r3, #22
 8003d64:	6003      	str	r3, [r0, #0]
 8003d66:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d6e:	b112      	cbz	r2, 8003d76 <_raise_r+0x1e>
 8003d70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d74:	b94b      	cbnz	r3, 8003d8a <_raise_r+0x32>
 8003d76:	4620      	mov	r0, r4
 8003d78:	f000 f830 	bl	8003ddc <_getpid_r>
 8003d7c:	462a      	mov	r2, r5
 8003d7e:	4601      	mov	r1, r0
 8003d80:	4620      	mov	r0, r4
 8003d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d86:	f000 b817 	b.w	8003db8 <_kill_r>
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d00a      	beq.n	8003da4 <_raise_r+0x4c>
 8003d8e:	1c59      	adds	r1, r3, #1
 8003d90:	d103      	bne.n	8003d9a <_raise_r+0x42>
 8003d92:	2316      	movs	r3, #22
 8003d94:	6003      	str	r3, [r0, #0]
 8003d96:	2001      	movs	r0, #1
 8003d98:	e7e7      	b.n	8003d6a <_raise_r+0x12>
 8003d9a:	2400      	movs	r4, #0
 8003d9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003da0:	4628      	mov	r0, r5
 8003da2:	4798      	blx	r3
 8003da4:	2000      	movs	r0, #0
 8003da6:	e7e0      	b.n	8003d6a <_raise_r+0x12>

08003da8 <raise>:
 8003da8:	4b02      	ldr	r3, [pc, #8]	; (8003db4 <raise+0xc>)
 8003daa:	4601      	mov	r1, r0
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	f7ff bfd3 	b.w	8003d58 <_raise_r>
 8003db2:	bf00      	nop
 8003db4:	2000000c 	.word	0x2000000c

08003db8 <_kill_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4d07      	ldr	r5, [pc, #28]	; (8003dd8 <_kill_r+0x20>)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	602b      	str	r3, [r5, #0]
 8003dc6:	f7fc fe07 	bl	80009d8 <_kill>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	d102      	bne.n	8003dd4 <_kill_r+0x1c>
 8003dce:	682b      	ldr	r3, [r5, #0]
 8003dd0:	b103      	cbz	r3, 8003dd4 <_kill_r+0x1c>
 8003dd2:	6023      	str	r3, [r4, #0]
 8003dd4:	bd38      	pop	{r3, r4, r5, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000158 	.word	0x20000158

08003ddc <_getpid_r>:
 8003ddc:	f7fc bdf4 	b.w	80009c8 <_getpid>

08003de0 <__swbuf_r>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	460e      	mov	r6, r1
 8003de4:	4614      	mov	r4, r2
 8003de6:	4605      	mov	r5, r0
 8003de8:	b118      	cbz	r0, 8003df2 <__swbuf_r+0x12>
 8003dea:	6983      	ldr	r3, [r0, #24]
 8003dec:	b90b      	cbnz	r3, 8003df2 <__swbuf_r+0x12>
 8003dee:	f000 f9d1 	bl	8004194 <__sinit>
 8003df2:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <__swbuf_r+0x98>)
 8003df4:	429c      	cmp	r4, r3
 8003df6:	d12b      	bne.n	8003e50 <__swbuf_r+0x70>
 8003df8:	686c      	ldr	r4, [r5, #4]
 8003dfa:	69a3      	ldr	r3, [r4, #24]
 8003dfc:	60a3      	str	r3, [r4, #8]
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	071a      	lsls	r2, r3, #28
 8003e02:	d52f      	bpl.n	8003e64 <__swbuf_r+0x84>
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	b36b      	cbz	r3, 8003e64 <__swbuf_r+0x84>
 8003e08:	6923      	ldr	r3, [r4, #16]
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	1ac0      	subs	r0, r0, r3
 8003e0e:	6963      	ldr	r3, [r4, #20]
 8003e10:	b2f6      	uxtb	r6, r6
 8003e12:	4283      	cmp	r3, r0
 8003e14:	4637      	mov	r7, r6
 8003e16:	dc04      	bgt.n	8003e22 <__swbuf_r+0x42>
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 f926 	bl	800406c <_fflush_r>
 8003e20:	bb30      	cbnz	r0, 8003e70 <__swbuf_r+0x90>
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	60a3      	str	r3, [r4, #8]
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	6022      	str	r2, [r4, #0]
 8003e2e:	701e      	strb	r6, [r3, #0]
 8003e30:	6963      	ldr	r3, [r4, #20]
 8003e32:	3001      	adds	r0, #1
 8003e34:	4283      	cmp	r3, r0
 8003e36:	d004      	beq.n	8003e42 <__swbuf_r+0x62>
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	07db      	lsls	r3, r3, #31
 8003e3c:	d506      	bpl.n	8003e4c <__swbuf_r+0x6c>
 8003e3e:	2e0a      	cmp	r6, #10
 8003e40:	d104      	bne.n	8003e4c <__swbuf_r+0x6c>
 8003e42:	4621      	mov	r1, r4
 8003e44:	4628      	mov	r0, r5
 8003e46:	f000 f911 	bl	800406c <_fflush_r>
 8003e4a:	b988      	cbnz	r0, 8003e70 <__swbuf_r+0x90>
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <__swbuf_r+0x9c>)
 8003e52:	429c      	cmp	r4, r3
 8003e54:	d101      	bne.n	8003e5a <__swbuf_r+0x7a>
 8003e56:	68ac      	ldr	r4, [r5, #8]
 8003e58:	e7cf      	b.n	8003dfa <__swbuf_r+0x1a>
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <__swbuf_r+0xa0>)
 8003e5c:	429c      	cmp	r4, r3
 8003e5e:	bf08      	it	eq
 8003e60:	68ec      	ldreq	r4, [r5, #12]
 8003e62:	e7ca      	b.n	8003dfa <__swbuf_r+0x1a>
 8003e64:	4621      	mov	r1, r4
 8003e66:	4628      	mov	r0, r5
 8003e68:	f000 f80c 	bl	8003e84 <__swsetup_r>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d0cb      	beq.n	8003e08 <__swbuf_r+0x28>
 8003e70:	f04f 37ff 	mov.w	r7, #4294967295
 8003e74:	e7ea      	b.n	8003e4c <__swbuf_r+0x6c>
 8003e76:	bf00      	nop
 8003e78:	08004bfc 	.word	0x08004bfc
 8003e7c:	08004c1c 	.word	0x08004c1c
 8003e80:	08004bdc 	.word	0x08004bdc

08003e84 <__swsetup_r>:
 8003e84:	4b32      	ldr	r3, [pc, #200]	; (8003f50 <__swsetup_r+0xcc>)
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	681d      	ldr	r5, [r3, #0]
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	b125      	cbz	r5, 8003e9a <__swsetup_r+0x16>
 8003e90:	69ab      	ldr	r3, [r5, #24]
 8003e92:	b913      	cbnz	r3, 8003e9a <__swsetup_r+0x16>
 8003e94:	4628      	mov	r0, r5
 8003e96:	f000 f97d 	bl	8004194 <__sinit>
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <__swsetup_r+0xd0>)
 8003e9c:	429c      	cmp	r4, r3
 8003e9e:	d10f      	bne.n	8003ec0 <__swsetup_r+0x3c>
 8003ea0:	686c      	ldr	r4, [r5, #4]
 8003ea2:	89a3      	ldrh	r3, [r4, #12]
 8003ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ea8:	0719      	lsls	r1, r3, #28
 8003eaa:	d42c      	bmi.n	8003f06 <__swsetup_r+0x82>
 8003eac:	06dd      	lsls	r5, r3, #27
 8003eae:	d411      	bmi.n	8003ed4 <__swsetup_r+0x50>
 8003eb0:	2309      	movs	r3, #9
 8003eb2:	6033      	str	r3, [r6, #0]
 8003eb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003eb8:	81a3      	strh	r3, [r4, #12]
 8003eba:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebe:	e03e      	b.n	8003f3e <__swsetup_r+0xba>
 8003ec0:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <__swsetup_r+0xd4>)
 8003ec2:	429c      	cmp	r4, r3
 8003ec4:	d101      	bne.n	8003eca <__swsetup_r+0x46>
 8003ec6:	68ac      	ldr	r4, [r5, #8]
 8003ec8:	e7eb      	b.n	8003ea2 <__swsetup_r+0x1e>
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <__swsetup_r+0xd8>)
 8003ecc:	429c      	cmp	r4, r3
 8003ece:	bf08      	it	eq
 8003ed0:	68ec      	ldreq	r4, [r5, #12]
 8003ed2:	e7e6      	b.n	8003ea2 <__swsetup_r+0x1e>
 8003ed4:	0758      	lsls	r0, r3, #29
 8003ed6:	d512      	bpl.n	8003efe <__swsetup_r+0x7a>
 8003ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eda:	b141      	cbz	r1, 8003eee <__swsetup_r+0x6a>
 8003edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	d002      	beq.n	8003eea <__swsetup_r+0x66>
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f7ff fdb9 	bl	8003a5c <_free_r>
 8003eea:	2300      	movs	r3, #0
 8003eec:	6363      	str	r3, [r4, #52]	; 0x34
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ef4:	81a3      	strh	r3, [r4, #12]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	6923      	ldr	r3, [r4, #16]
 8003efc:	6023      	str	r3, [r4, #0]
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	f043 0308 	orr.w	r3, r3, #8
 8003f04:	81a3      	strh	r3, [r4, #12]
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	b94b      	cbnz	r3, 8003f1e <__swsetup_r+0x9a>
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f14:	d003      	beq.n	8003f1e <__swsetup_r+0x9a>
 8003f16:	4621      	mov	r1, r4
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f000 fa01 	bl	8004320 <__smakebuf_r>
 8003f1e:	89a0      	ldrh	r0, [r4, #12]
 8003f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f24:	f010 0301 	ands.w	r3, r0, #1
 8003f28:	d00a      	beq.n	8003f40 <__swsetup_r+0xbc>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60a3      	str	r3, [r4, #8]
 8003f2e:	6963      	ldr	r3, [r4, #20]
 8003f30:	425b      	negs	r3, r3
 8003f32:	61a3      	str	r3, [r4, #24]
 8003f34:	6923      	ldr	r3, [r4, #16]
 8003f36:	b943      	cbnz	r3, 8003f4a <__swsetup_r+0xc6>
 8003f38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f3c:	d1ba      	bne.n	8003eb4 <__swsetup_r+0x30>
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	0781      	lsls	r1, r0, #30
 8003f42:	bf58      	it	pl
 8003f44:	6963      	ldrpl	r3, [r4, #20]
 8003f46:	60a3      	str	r3, [r4, #8]
 8003f48:	e7f4      	b.n	8003f34 <__swsetup_r+0xb0>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e7f7      	b.n	8003f3e <__swsetup_r+0xba>
 8003f4e:	bf00      	nop
 8003f50:	2000000c 	.word	0x2000000c
 8003f54:	08004bfc 	.word	0x08004bfc
 8003f58:	08004c1c 	.word	0x08004c1c
 8003f5c:	08004bdc 	.word	0x08004bdc

08003f60 <__sflush_r>:
 8003f60:	898a      	ldrh	r2, [r1, #12]
 8003f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f66:	4605      	mov	r5, r0
 8003f68:	0710      	lsls	r0, r2, #28
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	d458      	bmi.n	8004020 <__sflush_r+0xc0>
 8003f6e:	684b      	ldr	r3, [r1, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	dc05      	bgt.n	8003f80 <__sflush_r+0x20>
 8003f74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	dc02      	bgt.n	8003f80 <__sflush_r+0x20>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f82:	2e00      	cmp	r6, #0
 8003f84:	d0f9      	beq.n	8003f7a <__sflush_r+0x1a>
 8003f86:	2300      	movs	r3, #0
 8003f88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f8c:	682f      	ldr	r7, [r5, #0]
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	d032      	beq.n	8003ff8 <__sflush_r+0x98>
 8003f92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	075a      	lsls	r2, r3, #29
 8003f98:	d505      	bpl.n	8003fa6 <__sflush_r+0x46>
 8003f9a:	6863      	ldr	r3, [r4, #4]
 8003f9c:	1ac0      	subs	r0, r0, r3
 8003f9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fa0:	b10b      	cbz	r3, 8003fa6 <__sflush_r+0x46>
 8003fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fa4:	1ac0      	subs	r0, r0, r3
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fac:	6a21      	ldr	r1, [r4, #32]
 8003fae:	4628      	mov	r0, r5
 8003fb0:	47b0      	blx	r6
 8003fb2:	1c43      	adds	r3, r0, #1
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	d106      	bne.n	8003fc6 <__sflush_r+0x66>
 8003fb8:	6829      	ldr	r1, [r5, #0]
 8003fba:	291d      	cmp	r1, #29
 8003fbc:	d82c      	bhi.n	8004018 <__sflush_r+0xb8>
 8003fbe:	4a2a      	ldr	r2, [pc, #168]	; (8004068 <__sflush_r+0x108>)
 8003fc0:	40ca      	lsrs	r2, r1
 8003fc2:	07d6      	lsls	r6, r2, #31
 8003fc4:	d528      	bpl.n	8004018 <__sflush_r+0xb8>
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	6062      	str	r2, [r4, #4]
 8003fca:	04d9      	lsls	r1, r3, #19
 8003fcc:	6922      	ldr	r2, [r4, #16]
 8003fce:	6022      	str	r2, [r4, #0]
 8003fd0:	d504      	bpl.n	8003fdc <__sflush_r+0x7c>
 8003fd2:	1c42      	adds	r2, r0, #1
 8003fd4:	d101      	bne.n	8003fda <__sflush_r+0x7a>
 8003fd6:	682b      	ldr	r3, [r5, #0]
 8003fd8:	b903      	cbnz	r3, 8003fdc <__sflush_r+0x7c>
 8003fda:	6560      	str	r0, [r4, #84]	; 0x54
 8003fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fde:	602f      	str	r7, [r5, #0]
 8003fe0:	2900      	cmp	r1, #0
 8003fe2:	d0ca      	beq.n	8003f7a <__sflush_r+0x1a>
 8003fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fe8:	4299      	cmp	r1, r3
 8003fea:	d002      	beq.n	8003ff2 <__sflush_r+0x92>
 8003fec:	4628      	mov	r0, r5
 8003fee:	f7ff fd35 	bl	8003a5c <_free_r>
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	6360      	str	r0, [r4, #52]	; 0x34
 8003ff6:	e7c1      	b.n	8003f7c <__sflush_r+0x1c>
 8003ff8:	6a21      	ldr	r1, [r4, #32]
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	47b0      	blx	r6
 8004000:	1c41      	adds	r1, r0, #1
 8004002:	d1c7      	bne.n	8003f94 <__sflush_r+0x34>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0c4      	beq.n	8003f94 <__sflush_r+0x34>
 800400a:	2b1d      	cmp	r3, #29
 800400c:	d001      	beq.n	8004012 <__sflush_r+0xb2>
 800400e:	2b16      	cmp	r3, #22
 8004010:	d101      	bne.n	8004016 <__sflush_r+0xb6>
 8004012:	602f      	str	r7, [r5, #0]
 8004014:	e7b1      	b.n	8003f7a <__sflush_r+0x1a>
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401c:	81a3      	strh	r3, [r4, #12]
 800401e:	e7ad      	b.n	8003f7c <__sflush_r+0x1c>
 8004020:	690f      	ldr	r7, [r1, #16]
 8004022:	2f00      	cmp	r7, #0
 8004024:	d0a9      	beq.n	8003f7a <__sflush_r+0x1a>
 8004026:	0793      	lsls	r3, r2, #30
 8004028:	680e      	ldr	r6, [r1, #0]
 800402a:	bf08      	it	eq
 800402c:	694b      	ldreq	r3, [r1, #20]
 800402e:	600f      	str	r7, [r1, #0]
 8004030:	bf18      	it	ne
 8004032:	2300      	movne	r3, #0
 8004034:	eba6 0807 	sub.w	r8, r6, r7
 8004038:	608b      	str	r3, [r1, #8]
 800403a:	f1b8 0f00 	cmp.w	r8, #0
 800403e:	dd9c      	ble.n	8003f7a <__sflush_r+0x1a>
 8004040:	6a21      	ldr	r1, [r4, #32]
 8004042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004044:	4643      	mov	r3, r8
 8004046:	463a      	mov	r2, r7
 8004048:	4628      	mov	r0, r5
 800404a:	47b0      	blx	r6
 800404c:	2800      	cmp	r0, #0
 800404e:	dc06      	bgt.n	800405e <__sflush_r+0xfe>
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004056:	81a3      	strh	r3, [r4, #12]
 8004058:	f04f 30ff 	mov.w	r0, #4294967295
 800405c:	e78e      	b.n	8003f7c <__sflush_r+0x1c>
 800405e:	4407      	add	r7, r0
 8004060:	eba8 0800 	sub.w	r8, r8, r0
 8004064:	e7e9      	b.n	800403a <__sflush_r+0xda>
 8004066:	bf00      	nop
 8004068:	20400001 	.word	0x20400001

0800406c <_fflush_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	690b      	ldr	r3, [r1, #16]
 8004070:	4605      	mov	r5, r0
 8004072:	460c      	mov	r4, r1
 8004074:	b913      	cbnz	r3, 800407c <_fflush_r+0x10>
 8004076:	2500      	movs	r5, #0
 8004078:	4628      	mov	r0, r5
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	b118      	cbz	r0, 8004086 <_fflush_r+0x1a>
 800407e:	6983      	ldr	r3, [r0, #24]
 8004080:	b90b      	cbnz	r3, 8004086 <_fflush_r+0x1a>
 8004082:	f000 f887 	bl	8004194 <__sinit>
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <_fflush_r+0x6c>)
 8004088:	429c      	cmp	r4, r3
 800408a:	d11b      	bne.n	80040c4 <_fflush_r+0x58>
 800408c:	686c      	ldr	r4, [r5, #4]
 800408e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0ef      	beq.n	8004076 <_fflush_r+0xa>
 8004096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004098:	07d0      	lsls	r0, r2, #31
 800409a:	d404      	bmi.n	80040a6 <_fflush_r+0x3a>
 800409c:	0599      	lsls	r1, r3, #22
 800409e:	d402      	bmi.n	80040a6 <_fflush_r+0x3a>
 80040a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040a2:	f000 f915 	bl	80042d0 <__retarget_lock_acquire_recursive>
 80040a6:	4628      	mov	r0, r5
 80040a8:	4621      	mov	r1, r4
 80040aa:	f7ff ff59 	bl	8003f60 <__sflush_r>
 80040ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040b0:	07da      	lsls	r2, r3, #31
 80040b2:	4605      	mov	r5, r0
 80040b4:	d4e0      	bmi.n	8004078 <_fflush_r+0xc>
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	059b      	lsls	r3, r3, #22
 80040ba:	d4dd      	bmi.n	8004078 <_fflush_r+0xc>
 80040bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040be:	f000 f908 	bl	80042d2 <__retarget_lock_release_recursive>
 80040c2:	e7d9      	b.n	8004078 <_fflush_r+0xc>
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <_fflush_r+0x70>)
 80040c6:	429c      	cmp	r4, r3
 80040c8:	d101      	bne.n	80040ce <_fflush_r+0x62>
 80040ca:	68ac      	ldr	r4, [r5, #8]
 80040cc:	e7df      	b.n	800408e <_fflush_r+0x22>
 80040ce:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <_fflush_r+0x74>)
 80040d0:	429c      	cmp	r4, r3
 80040d2:	bf08      	it	eq
 80040d4:	68ec      	ldreq	r4, [r5, #12]
 80040d6:	e7da      	b.n	800408e <_fflush_r+0x22>
 80040d8:	08004bfc 	.word	0x08004bfc
 80040dc:	08004c1c 	.word	0x08004c1c
 80040e0:	08004bdc 	.word	0x08004bdc

080040e4 <std>:
 80040e4:	2300      	movs	r3, #0
 80040e6:	b510      	push	{r4, lr}
 80040e8:	4604      	mov	r4, r0
 80040ea:	e9c0 3300 	strd	r3, r3, [r0]
 80040ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040f2:	6083      	str	r3, [r0, #8]
 80040f4:	8181      	strh	r1, [r0, #12]
 80040f6:	6643      	str	r3, [r0, #100]	; 0x64
 80040f8:	81c2      	strh	r2, [r0, #14]
 80040fa:	6183      	str	r3, [r0, #24]
 80040fc:	4619      	mov	r1, r3
 80040fe:	2208      	movs	r2, #8
 8004100:	305c      	adds	r0, #92	; 0x5c
 8004102:	f7ff fca3 	bl	8003a4c <memset>
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <std+0x38>)
 8004108:	6263      	str	r3, [r4, #36]	; 0x24
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <std+0x3c>)
 800410c:	62a3      	str	r3, [r4, #40]	; 0x28
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <std+0x40>)
 8004110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <std+0x44>)
 8004114:	6224      	str	r4, [r4, #32]
 8004116:	6323      	str	r3, [r4, #48]	; 0x30
 8004118:	bd10      	pop	{r4, pc}
 800411a:	bf00      	nop
 800411c:	08004995 	.word	0x08004995
 8004120:	080049b7 	.word	0x080049b7
 8004124:	080049ef 	.word	0x080049ef
 8004128:	08004a13 	.word	0x08004a13

0800412c <_cleanup_r>:
 800412c:	4901      	ldr	r1, [pc, #4]	; (8004134 <_cleanup_r+0x8>)
 800412e:	f000 b8af 	b.w	8004290 <_fwalk_reent>
 8004132:	bf00      	nop
 8004134:	0800406d 	.word	0x0800406d

08004138 <__sfmoreglue>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	2268      	movs	r2, #104	; 0x68
 800413c:	1e4d      	subs	r5, r1, #1
 800413e:	4355      	muls	r5, r2
 8004140:	460e      	mov	r6, r1
 8004142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004146:	f7ff fcf5 	bl	8003b34 <_malloc_r>
 800414a:	4604      	mov	r4, r0
 800414c:	b140      	cbz	r0, 8004160 <__sfmoreglue+0x28>
 800414e:	2100      	movs	r1, #0
 8004150:	e9c0 1600 	strd	r1, r6, [r0]
 8004154:	300c      	adds	r0, #12
 8004156:	60a0      	str	r0, [r4, #8]
 8004158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800415c:	f7ff fc76 	bl	8003a4c <memset>
 8004160:	4620      	mov	r0, r4
 8004162:	bd70      	pop	{r4, r5, r6, pc}

08004164 <__sfp_lock_acquire>:
 8004164:	4801      	ldr	r0, [pc, #4]	; (800416c <__sfp_lock_acquire+0x8>)
 8004166:	f000 b8b3 	b.w	80042d0 <__retarget_lock_acquire_recursive>
 800416a:	bf00      	nop
 800416c:	20000155 	.word	0x20000155

08004170 <__sfp_lock_release>:
 8004170:	4801      	ldr	r0, [pc, #4]	; (8004178 <__sfp_lock_release+0x8>)
 8004172:	f000 b8ae 	b.w	80042d2 <__retarget_lock_release_recursive>
 8004176:	bf00      	nop
 8004178:	20000155 	.word	0x20000155

0800417c <__sinit_lock_acquire>:
 800417c:	4801      	ldr	r0, [pc, #4]	; (8004184 <__sinit_lock_acquire+0x8>)
 800417e:	f000 b8a7 	b.w	80042d0 <__retarget_lock_acquire_recursive>
 8004182:	bf00      	nop
 8004184:	20000156 	.word	0x20000156

08004188 <__sinit_lock_release>:
 8004188:	4801      	ldr	r0, [pc, #4]	; (8004190 <__sinit_lock_release+0x8>)
 800418a:	f000 b8a2 	b.w	80042d2 <__retarget_lock_release_recursive>
 800418e:	bf00      	nop
 8004190:	20000156 	.word	0x20000156

08004194 <__sinit>:
 8004194:	b510      	push	{r4, lr}
 8004196:	4604      	mov	r4, r0
 8004198:	f7ff fff0 	bl	800417c <__sinit_lock_acquire>
 800419c:	69a3      	ldr	r3, [r4, #24]
 800419e:	b11b      	cbz	r3, 80041a8 <__sinit+0x14>
 80041a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041a4:	f7ff bff0 	b.w	8004188 <__sinit_lock_release>
 80041a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80041ac:	6523      	str	r3, [r4, #80]	; 0x50
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <__sinit+0x68>)
 80041b0:	4a13      	ldr	r2, [pc, #76]	; (8004200 <__sinit+0x6c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80041b6:	42a3      	cmp	r3, r4
 80041b8:	bf04      	itt	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	61a3      	streq	r3, [r4, #24]
 80041be:	4620      	mov	r0, r4
 80041c0:	f000 f820 	bl	8004204 <__sfp>
 80041c4:	6060      	str	r0, [r4, #4]
 80041c6:	4620      	mov	r0, r4
 80041c8:	f000 f81c 	bl	8004204 <__sfp>
 80041cc:	60a0      	str	r0, [r4, #8]
 80041ce:	4620      	mov	r0, r4
 80041d0:	f000 f818 	bl	8004204 <__sfp>
 80041d4:	2200      	movs	r2, #0
 80041d6:	60e0      	str	r0, [r4, #12]
 80041d8:	2104      	movs	r1, #4
 80041da:	6860      	ldr	r0, [r4, #4]
 80041dc:	f7ff ff82 	bl	80040e4 <std>
 80041e0:	68a0      	ldr	r0, [r4, #8]
 80041e2:	2201      	movs	r2, #1
 80041e4:	2109      	movs	r1, #9
 80041e6:	f7ff ff7d 	bl	80040e4 <std>
 80041ea:	68e0      	ldr	r0, [r4, #12]
 80041ec:	2202      	movs	r2, #2
 80041ee:	2112      	movs	r1, #18
 80041f0:	f7ff ff78 	bl	80040e4 <std>
 80041f4:	2301      	movs	r3, #1
 80041f6:	61a3      	str	r3, [r4, #24]
 80041f8:	e7d2      	b.n	80041a0 <__sinit+0xc>
 80041fa:	bf00      	nop
 80041fc:	08004bd8 	.word	0x08004bd8
 8004200:	0800412d 	.word	0x0800412d

08004204 <__sfp>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	4607      	mov	r7, r0
 8004208:	f7ff ffac 	bl	8004164 <__sfp_lock_acquire>
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <__sfp+0x84>)
 800420e:	681e      	ldr	r6, [r3, #0]
 8004210:	69b3      	ldr	r3, [r6, #24]
 8004212:	b913      	cbnz	r3, 800421a <__sfp+0x16>
 8004214:	4630      	mov	r0, r6
 8004216:	f7ff ffbd 	bl	8004194 <__sinit>
 800421a:	3648      	adds	r6, #72	; 0x48
 800421c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004220:	3b01      	subs	r3, #1
 8004222:	d503      	bpl.n	800422c <__sfp+0x28>
 8004224:	6833      	ldr	r3, [r6, #0]
 8004226:	b30b      	cbz	r3, 800426c <__sfp+0x68>
 8004228:	6836      	ldr	r6, [r6, #0]
 800422a:	e7f7      	b.n	800421c <__sfp+0x18>
 800422c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004230:	b9d5      	cbnz	r5, 8004268 <__sfp+0x64>
 8004232:	4b16      	ldr	r3, [pc, #88]	; (800428c <__sfp+0x88>)
 8004234:	60e3      	str	r3, [r4, #12]
 8004236:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800423a:	6665      	str	r5, [r4, #100]	; 0x64
 800423c:	f000 f847 	bl	80042ce <__retarget_lock_init_recursive>
 8004240:	f7ff ff96 	bl	8004170 <__sfp_lock_release>
 8004244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800424c:	6025      	str	r5, [r4, #0]
 800424e:	61a5      	str	r5, [r4, #24]
 8004250:	2208      	movs	r2, #8
 8004252:	4629      	mov	r1, r5
 8004254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004258:	f7ff fbf8 	bl	8003a4c <memset>
 800425c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004264:	4620      	mov	r0, r4
 8004266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004268:	3468      	adds	r4, #104	; 0x68
 800426a:	e7d9      	b.n	8004220 <__sfp+0x1c>
 800426c:	2104      	movs	r1, #4
 800426e:	4638      	mov	r0, r7
 8004270:	f7ff ff62 	bl	8004138 <__sfmoreglue>
 8004274:	4604      	mov	r4, r0
 8004276:	6030      	str	r0, [r6, #0]
 8004278:	2800      	cmp	r0, #0
 800427a:	d1d5      	bne.n	8004228 <__sfp+0x24>
 800427c:	f7ff ff78 	bl	8004170 <__sfp_lock_release>
 8004280:	230c      	movs	r3, #12
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	e7ee      	b.n	8004264 <__sfp+0x60>
 8004286:	bf00      	nop
 8004288:	08004bd8 	.word	0x08004bd8
 800428c:	ffff0001 	.word	0xffff0001

08004290 <_fwalk_reent>:
 8004290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004294:	4606      	mov	r6, r0
 8004296:	4688      	mov	r8, r1
 8004298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800429c:	2700      	movs	r7, #0
 800429e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042a2:	f1b9 0901 	subs.w	r9, r9, #1
 80042a6:	d505      	bpl.n	80042b4 <_fwalk_reent+0x24>
 80042a8:	6824      	ldr	r4, [r4, #0]
 80042aa:	2c00      	cmp	r4, #0
 80042ac:	d1f7      	bne.n	800429e <_fwalk_reent+0xe>
 80042ae:	4638      	mov	r0, r7
 80042b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042b4:	89ab      	ldrh	r3, [r5, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d907      	bls.n	80042ca <_fwalk_reent+0x3a>
 80042ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042be:	3301      	adds	r3, #1
 80042c0:	d003      	beq.n	80042ca <_fwalk_reent+0x3a>
 80042c2:	4629      	mov	r1, r5
 80042c4:	4630      	mov	r0, r6
 80042c6:	47c0      	blx	r8
 80042c8:	4307      	orrs	r7, r0
 80042ca:	3568      	adds	r5, #104	; 0x68
 80042cc:	e7e9      	b.n	80042a2 <_fwalk_reent+0x12>

080042ce <__retarget_lock_init_recursive>:
 80042ce:	4770      	bx	lr

080042d0 <__retarget_lock_acquire_recursive>:
 80042d0:	4770      	bx	lr

080042d2 <__retarget_lock_release_recursive>:
 80042d2:	4770      	bx	lr

080042d4 <__swhatbuf_r>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	460e      	mov	r6, r1
 80042d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042dc:	2900      	cmp	r1, #0
 80042de:	b096      	sub	sp, #88	; 0x58
 80042e0:	4614      	mov	r4, r2
 80042e2:	461d      	mov	r5, r3
 80042e4:	da08      	bge.n	80042f8 <__swhatbuf_r+0x24>
 80042e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	602a      	str	r2, [r5, #0]
 80042ee:	061a      	lsls	r2, r3, #24
 80042f0:	d410      	bmi.n	8004314 <__swhatbuf_r+0x40>
 80042f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042f6:	e00e      	b.n	8004316 <__swhatbuf_r+0x42>
 80042f8:	466a      	mov	r2, sp
 80042fa:	f000 fbb1 	bl	8004a60 <_fstat_r>
 80042fe:	2800      	cmp	r0, #0
 8004300:	dbf1      	blt.n	80042e6 <__swhatbuf_r+0x12>
 8004302:	9a01      	ldr	r2, [sp, #4]
 8004304:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004308:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800430c:	425a      	negs	r2, r3
 800430e:	415a      	adcs	r2, r3
 8004310:	602a      	str	r2, [r5, #0]
 8004312:	e7ee      	b.n	80042f2 <__swhatbuf_r+0x1e>
 8004314:	2340      	movs	r3, #64	; 0x40
 8004316:	2000      	movs	r0, #0
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	b016      	add	sp, #88	; 0x58
 800431c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004320 <__smakebuf_r>:
 8004320:	898b      	ldrh	r3, [r1, #12]
 8004322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004324:	079d      	lsls	r5, r3, #30
 8004326:	4606      	mov	r6, r0
 8004328:	460c      	mov	r4, r1
 800432a:	d507      	bpl.n	800433c <__smakebuf_r+0x1c>
 800432c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	6123      	str	r3, [r4, #16]
 8004334:	2301      	movs	r3, #1
 8004336:	6163      	str	r3, [r4, #20]
 8004338:	b002      	add	sp, #8
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	ab01      	add	r3, sp, #4
 800433e:	466a      	mov	r2, sp
 8004340:	f7ff ffc8 	bl	80042d4 <__swhatbuf_r>
 8004344:	9900      	ldr	r1, [sp, #0]
 8004346:	4605      	mov	r5, r0
 8004348:	4630      	mov	r0, r6
 800434a:	f7ff fbf3 	bl	8003b34 <_malloc_r>
 800434e:	b948      	cbnz	r0, 8004364 <__smakebuf_r+0x44>
 8004350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004354:	059a      	lsls	r2, r3, #22
 8004356:	d4ef      	bmi.n	8004338 <__smakebuf_r+0x18>
 8004358:	f023 0303 	bic.w	r3, r3, #3
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	81a3      	strh	r3, [r4, #12]
 8004362:	e7e3      	b.n	800432c <__smakebuf_r+0xc>
 8004364:	4b0d      	ldr	r3, [pc, #52]	; (800439c <__smakebuf_r+0x7c>)
 8004366:	62b3      	str	r3, [r6, #40]	; 0x28
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	6020      	str	r0, [r4, #0]
 800436c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	9b00      	ldr	r3, [sp, #0]
 8004374:	6163      	str	r3, [r4, #20]
 8004376:	9b01      	ldr	r3, [sp, #4]
 8004378:	6120      	str	r0, [r4, #16]
 800437a:	b15b      	cbz	r3, 8004394 <__smakebuf_r+0x74>
 800437c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004380:	4630      	mov	r0, r6
 8004382:	f000 fb7f 	bl	8004a84 <_isatty_r>
 8004386:	b128      	cbz	r0, 8004394 <__smakebuf_r+0x74>
 8004388:	89a3      	ldrh	r3, [r4, #12]
 800438a:	f023 0303 	bic.w	r3, r3, #3
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	81a3      	strh	r3, [r4, #12]
 8004394:	89a0      	ldrh	r0, [r4, #12]
 8004396:	4305      	orrs	r5, r0
 8004398:	81a5      	strh	r5, [r4, #12]
 800439a:	e7cd      	b.n	8004338 <__smakebuf_r+0x18>
 800439c:	0800412d 	.word	0x0800412d

080043a0 <__malloc_lock>:
 80043a0:	4801      	ldr	r0, [pc, #4]	; (80043a8 <__malloc_lock+0x8>)
 80043a2:	f7ff bf95 	b.w	80042d0 <__retarget_lock_acquire_recursive>
 80043a6:	bf00      	nop
 80043a8:	20000154 	.word	0x20000154

080043ac <__malloc_unlock>:
 80043ac:	4801      	ldr	r0, [pc, #4]	; (80043b4 <__malloc_unlock+0x8>)
 80043ae:	f7ff bf90 	b.w	80042d2 <__retarget_lock_release_recursive>
 80043b2:	bf00      	nop
 80043b4:	20000154 	.word	0x20000154

080043b8 <__sfputc_r>:
 80043b8:	6893      	ldr	r3, [r2, #8]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	b410      	push	{r4}
 80043c0:	6093      	str	r3, [r2, #8]
 80043c2:	da08      	bge.n	80043d6 <__sfputc_r+0x1e>
 80043c4:	6994      	ldr	r4, [r2, #24]
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	db01      	blt.n	80043ce <__sfputc_r+0x16>
 80043ca:	290a      	cmp	r1, #10
 80043cc:	d103      	bne.n	80043d6 <__sfputc_r+0x1e>
 80043ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043d2:	f7ff bd05 	b.w	8003de0 <__swbuf_r>
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	1c58      	adds	r0, r3, #1
 80043da:	6010      	str	r0, [r2, #0]
 80043dc:	7019      	strb	r1, [r3, #0]
 80043de:	4608      	mov	r0, r1
 80043e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <__sfputs_r>:
 80043e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e8:	4606      	mov	r6, r0
 80043ea:	460f      	mov	r7, r1
 80043ec:	4614      	mov	r4, r2
 80043ee:	18d5      	adds	r5, r2, r3
 80043f0:	42ac      	cmp	r4, r5
 80043f2:	d101      	bne.n	80043f8 <__sfputs_r+0x12>
 80043f4:	2000      	movs	r0, #0
 80043f6:	e007      	b.n	8004408 <__sfputs_r+0x22>
 80043f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043fc:	463a      	mov	r2, r7
 80043fe:	4630      	mov	r0, r6
 8004400:	f7ff ffda 	bl	80043b8 <__sfputc_r>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	d1f3      	bne.n	80043f0 <__sfputs_r+0xa>
 8004408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800440c <_vfiprintf_r>:
 800440c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004410:	460d      	mov	r5, r1
 8004412:	b09d      	sub	sp, #116	; 0x74
 8004414:	4614      	mov	r4, r2
 8004416:	4698      	mov	r8, r3
 8004418:	4606      	mov	r6, r0
 800441a:	b118      	cbz	r0, 8004424 <_vfiprintf_r+0x18>
 800441c:	6983      	ldr	r3, [r0, #24]
 800441e:	b90b      	cbnz	r3, 8004424 <_vfiprintf_r+0x18>
 8004420:	f7ff feb8 	bl	8004194 <__sinit>
 8004424:	4b89      	ldr	r3, [pc, #548]	; (800464c <_vfiprintf_r+0x240>)
 8004426:	429d      	cmp	r5, r3
 8004428:	d11b      	bne.n	8004462 <_vfiprintf_r+0x56>
 800442a:	6875      	ldr	r5, [r6, #4]
 800442c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800442e:	07d9      	lsls	r1, r3, #31
 8004430:	d405      	bmi.n	800443e <_vfiprintf_r+0x32>
 8004432:	89ab      	ldrh	r3, [r5, #12]
 8004434:	059a      	lsls	r2, r3, #22
 8004436:	d402      	bmi.n	800443e <_vfiprintf_r+0x32>
 8004438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800443a:	f7ff ff49 	bl	80042d0 <__retarget_lock_acquire_recursive>
 800443e:	89ab      	ldrh	r3, [r5, #12]
 8004440:	071b      	lsls	r3, r3, #28
 8004442:	d501      	bpl.n	8004448 <_vfiprintf_r+0x3c>
 8004444:	692b      	ldr	r3, [r5, #16]
 8004446:	b9eb      	cbnz	r3, 8004484 <_vfiprintf_r+0x78>
 8004448:	4629      	mov	r1, r5
 800444a:	4630      	mov	r0, r6
 800444c:	f7ff fd1a 	bl	8003e84 <__swsetup_r>
 8004450:	b1c0      	cbz	r0, 8004484 <_vfiprintf_r+0x78>
 8004452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004454:	07dc      	lsls	r4, r3, #31
 8004456:	d50e      	bpl.n	8004476 <_vfiprintf_r+0x6a>
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	b01d      	add	sp, #116	; 0x74
 800445e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004462:	4b7b      	ldr	r3, [pc, #492]	; (8004650 <_vfiprintf_r+0x244>)
 8004464:	429d      	cmp	r5, r3
 8004466:	d101      	bne.n	800446c <_vfiprintf_r+0x60>
 8004468:	68b5      	ldr	r5, [r6, #8]
 800446a:	e7df      	b.n	800442c <_vfiprintf_r+0x20>
 800446c:	4b79      	ldr	r3, [pc, #484]	; (8004654 <_vfiprintf_r+0x248>)
 800446e:	429d      	cmp	r5, r3
 8004470:	bf08      	it	eq
 8004472:	68f5      	ldreq	r5, [r6, #12]
 8004474:	e7da      	b.n	800442c <_vfiprintf_r+0x20>
 8004476:	89ab      	ldrh	r3, [r5, #12]
 8004478:	0598      	lsls	r0, r3, #22
 800447a:	d4ed      	bmi.n	8004458 <_vfiprintf_r+0x4c>
 800447c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800447e:	f7ff ff28 	bl	80042d2 <__retarget_lock_release_recursive>
 8004482:	e7e9      	b.n	8004458 <_vfiprintf_r+0x4c>
 8004484:	2300      	movs	r3, #0
 8004486:	9309      	str	r3, [sp, #36]	; 0x24
 8004488:	2320      	movs	r3, #32
 800448a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800448e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004492:	2330      	movs	r3, #48	; 0x30
 8004494:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004658 <_vfiprintf_r+0x24c>
 8004498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800449c:	f04f 0901 	mov.w	r9, #1
 80044a0:	4623      	mov	r3, r4
 80044a2:	469a      	mov	sl, r3
 80044a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044a8:	b10a      	cbz	r2, 80044ae <_vfiprintf_r+0xa2>
 80044aa:	2a25      	cmp	r2, #37	; 0x25
 80044ac:	d1f9      	bne.n	80044a2 <_vfiprintf_r+0x96>
 80044ae:	ebba 0b04 	subs.w	fp, sl, r4
 80044b2:	d00b      	beq.n	80044cc <_vfiprintf_r+0xc0>
 80044b4:	465b      	mov	r3, fp
 80044b6:	4622      	mov	r2, r4
 80044b8:	4629      	mov	r1, r5
 80044ba:	4630      	mov	r0, r6
 80044bc:	f7ff ff93 	bl	80043e6 <__sfputs_r>
 80044c0:	3001      	adds	r0, #1
 80044c2:	f000 80aa 	beq.w	800461a <_vfiprintf_r+0x20e>
 80044c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044c8:	445a      	add	r2, fp
 80044ca:	9209      	str	r2, [sp, #36]	; 0x24
 80044cc:	f89a 3000 	ldrb.w	r3, [sl]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80a2 	beq.w	800461a <_vfiprintf_r+0x20e>
 80044d6:	2300      	movs	r3, #0
 80044d8:	f04f 32ff 	mov.w	r2, #4294967295
 80044dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044e0:	f10a 0a01 	add.w	sl, sl, #1
 80044e4:	9304      	str	r3, [sp, #16]
 80044e6:	9307      	str	r3, [sp, #28]
 80044e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044ec:	931a      	str	r3, [sp, #104]	; 0x68
 80044ee:	4654      	mov	r4, sl
 80044f0:	2205      	movs	r2, #5
 80044f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f6:	4858      	ldr	r0, [pc, #352]	; (8004658 <_vfiprintf_r+0x24c>)
 80044f8:	f7fb fe72 	bl	80001e0 <memchr>
 80044fc:	9a04      	ldr	r2, [sp, #16]
 80044fe:	b9d8      	cbnz	r0, 8004538 <_vfiprintf_r+0x12c>
 8004500:	06d1      	lsls	r1, r2, #27
 8004502:	bf44      	itt	mi
 8004504:	2320      	movmi	r3, #32
 8004506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800450a:	0713      	lsls	r3, r2, #28
 800450c:	bf44      	itt	mi
 800450e:	232b      	movmi	r3, #43	; 0x2b
 8004510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004514:	f89a 3000 	ldrb.w	r3, [sl]
 8004518:	2b2a      	cmp	r3, #42	; 0x2a
 800451a:	d015      	beq.n	8004548 <_vfiprintf_r+0x13c>
 800451c:	9a07      	ldr	r2, [sp, #28]
 800451e:	4654      	mov	r4, sl
 8004520:	2000      	movs	r0, #0
 8004522:	f04f 0c0a 	mov.w	ip, #10
 8004526:	4621      	mov	r1, r4
 8004528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800452c:	3b30      	subs	r3, #48	; 0x30
 800452e:	2b09      	cmp	r3, #9
 8004530:	d94e      	bls.n	80045d0 <_vfiprintf_r+0x1c4>
 8004532:	b1b0      	cbz	r0, 8004562 <_vfiprintf_r+0x156>
 8004534:	9207      	str	r2, [sp, #28]
 8004536:	e014      	b.n	8004562 <_vfiprintf_r+0x156>
 8004538:	eba0 0308 	sub.w	r3, r0, r8
 800453c:	fa09 f303 	lsl.w	r3, r9, r3
 8004540:	4313      	orrs	r3, r2
 8004542:	9304      	str	r3, [sp, #16]
 8004544:	46a2      	mov	sl, r4
 8004546:	e7d2      	b.n	80044ee <_vfiprintf_r+0xe2>
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	1d19      	adds	r1, r3, #4
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	9103      	str	r1, [sp, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	bfbb      	ittet	lt
 8004554:	425b      	neglt	r3, r3
 8004556:	f042 0202 	orrlt.w	r2, r2, #2
 800455a:	9307      	strge	r3, [sp, #28]
 800455c:	9307      	strlt	r3, [sp, #28]
 800455e:	bfb8      	it	lt
 8004560:	9204      	strlt	r2, [sp, #16]
 8004562:	7823      	ldrb	r3, [r4, #0]
 8004564:	2b2e      	cmp	r3, #46	; 0x2e
 8004566:	d10c      	bne.n	8004582 <_vfiprintf_r+0x176>
 8004568:	7863      	ldrb	r3, [r4, #1]
 800456a:	2b2a      	cmp	r3, #42	; 0x2a
 800456c:	d135      	bne.n	80045da <_vfiprintf_r+0x1ce>
 800456e:	9b03      	ldr	r3, [sp, #12]
 8004570:	1d1a      	adds	r2, r3, #4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	9203      	str	r2, [sp, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	bfb8      	it	lt
 800457a:	f04f 33ff 	movlt.w	r3, #4294967295
 800457e:	3402      	adds	r4, #2
 8004580:	9305      	str	r3, [sp, #20]
 8004582:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004668 <_vfiprintf_r+0x25c>
 8004586:	7821      	ldrb	r1, [r4, #0]
 8004588:	2203      	movs	r2, #3
 800458a:	4650      	mov	r0, sl
 800458c:	f7fb fe28 	bl	80001e0 <memchr>
 8004590:	b140      	cbz	r0, 80045a4 <_vfiprintf_r+0x198>
 8004592:	2340      	movs	r3, #64	; 0x40
 8004594:	eba0 000a 	sub.w	r0, r0, sl
 8004598:	fa03 f000 	lsl.w	r0, r3, r0
 800459c:	9b04      	ldr	r3, [sp, #16]
 800459e:	4303      	orrs	r3, r0
 80045a0:	3401      	adds	r4, #1
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045a8:	482c      	ldr	r0, [pc, #176]	; (800465c <_vfiprintf_r+0x250>)
 80045aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045ae:	2206      	movs	r2, #6
 80045b0:	f7fb fe16 	bl	80001e0 <memchr>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d03f      	beq.n	8004638 <_vfiprintf_r+0x22c>
 80045b8:	4b29      	ldr	r3, [pc, #164]	; (8004660 <_vfiprintf_r+0x254>)
 80045ba:	bb1b      	cbnz	r3, 8004604 <_vfiprintf_r+0x1f8>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	3307      	adds	r3, #7
 80045c0:	f023 0307 	bic.w	r3, r3, #7
 80045c4:	3308      	adds	r3, #8
 80045c6:	9303      	str	r3, [sp, #12]
 80045c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ca:	443b      	add	r3, r7
 80045cc:	9309      	str	r3, [sp, #36]	; 0x24
 80045ce:	e767      	b.n	80044a0 <_vfiprintf_r+0x94>
 80045d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80045d4:	460c      	mov	r4, r1
 80045d6:	2001      	movs	r0, #1
 80045d8:	e7a5      	b.n	8004526 <_vfiprintf_r+0x11a>
 80045da:	2300      	movs	r3, #0
 80045dc:	3401      	adds	r4, #1
 80045de:	9305      	str	r3, [sp, #20]
 80045e0:	4619      	mov	r1, r3
 80045e2:	f04f 0c0a 	mov.w	ip, #10
 80045e6:	4620      	mov	r0, r4
 80045e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ec:	3a30      	subs	r2, #48	; 0x30
 80045ee:	2a09      	cmp	r2, #9
 80045f0:	d903      	bls.n	80045fa <_vfiprintf_r+0x1ee>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0c5      	beq.n	8004582 <_vfiprintf_r+0x176>
 80045f6:	9105      	str	r1, [sp, #20]
 80045f8:	e7c3      	b.n	8004582 <_vfiprintf_r+0x176>
 80045fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80045fe:	4604      	mov	r4, r0
 8004600:	2301      	movs	r3, #1
 8004602:	e7f0      	b.n	80045e6 <_vfiprintf_r+0x1da>
 8004604:	ab03      	add	r3, sp, #12
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	462a      	mov	r2, r5
 800460a:	4b16      	ldr	r3, [pc, #88]	; (8004664 <_vfiprintf_r+0x258>)
 800460c:	a904      	add	r1, sp, #16
 800460e:	4630      	mov	r0, r6
 8004610:	f3af 8000 	nop.w
 8004614:	4607      	mov	r7, r0
 8004616:	1c78      	adds	r0, r7, #1
 8004618:	d1d6      	bne.n	80045c8 <_vfiprintf_r+0x1bc>
 800461a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800461c:	07d9      	lsls	r1, r3, #31
 800461e:	d405      	bmi.n	800462c <_vfiprintf_r+0x220>
 8004620:	89ab      	ldrh	r3, [r5, #12]
 8004622:	059a      	lsls	r2, r3, #22
 8004624:	d402      	bmi.n	800462c <_vfiprintf_r+0x220>
 8004626:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004628:	f7ff fe53 	bl	80042d2 <__retarget_lock_release_recursive>
 800462c:	89ab      	ldrh	r3, [r5, #12]
 800462e:	065b      	lsls	r3, r3, #25
 8004630:	f53f af12 	bmi.w	8004458 <_vfiprintf_r+0x4c>
 8004634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004636:	e711      	b.n	800445c <_vfiprintf_r+0x50>
 8004638:	ab03      	add	r3, sp, #12
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	462a      	mov	r2, r5
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <_vfiprintf_r+0x258>)
 8004640:	a904      	add	r1, sp, #16
 8004642:	4630      	mov	r0, r6
 8004644:	f000 f880 	bl	8004748 <_printf_i>
 8004648:	e7e4      	b.n	8004614 <_vfiprintf_r+0x208>
 800464a:	bf00      	nop
 800464c:	08004bfc 	.word	0x08004bfc
 8004650:	08004c1c 	.word	0x08004c1c
 8004654:	08004bdc 	.word	0x08004bdc
 8004658:	08004c3c 	.word	0x08004c3c
 800465c:	08004c46 	.word	0x08004c46
 8004660:	00000000 	.word	0x00000000
 8004664:	080043e7 	.word	0x080043e7
 8004668:	08004c42 	.word	0x08004c42

0800466c <_printf_common>:
 800466c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004670:	4616      	mov	r6, r2
 8004672:	4699      	mov	r9, r3
 8004674:	688a      	ldr	r2, [r1, #8]
 8004676:	690b      	ldr	r3, [r1, #16]
 8004678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800467c:	4293      	cmp	r3, r2
 800467e:	bfb8      	it	lt
 8004680:	4613      	movlt	r3, r2
 8004682:	6033      	str	r3, [r6, #0]
 8004684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004688:	4607      	mov	r7, r0
 800468a:	460c      	mov	r4, r1
 800468c:	b10a      	cbz	r2, 8004692 <_printf_common+0x26>
 800468e:	3301      	adds	r3, #1
 8004690:	6033      	str	r3, [r6, #0]
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	0699      	lsls	r1, r3, #26
 8004696:	bf42      	ittt	mi
 8004698:	6833      	ldrmi	r3, [r6, #0]
 800469a:	3302      	addmi	r3, #2
 800469c:	6033      	strmi	r3, [r6, #0]
 800469e:	6825      	ldr	r5, [r4, #0]
 80046a0:	f015 0506 	ands.w	r5, r5, #6
 80046a4:	d106      	bne.n	80046b4 <_printf_common+0x48>
 80046a6:	f104 0a19 	add.w	sl, r4, #25
 80046aa:	68e3      	ldr	r3, [r4, #12]
 80046ac:	6832      	ldr	r2, [r6, #0]
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	42ab      	cmp	r3, r5
 80046b2:	dc26      	bgt.n	8004702 <_printf_common+0x96>
 80046b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046b8:	1e13      	subs	r3, r2, #0
 80046ba:	6822      	ldr	r2, [r4, #0]
 80046bc:	bf18      	it	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	0692      	lsls	r2, r2, #26
 80046c2:	d42b      	bmi.n	800471c <_printf_common+0xb0>
 80046c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046c8:	4649      	mov	r1, r9
 80046ca:	4638      	mov	r0, r7
 80046cc:	47c0      	blx	r8
 80046ce:	3001      	adds	r0, #1
 80046d0:	d01e      	beq.n	8004710 <_printf_common+0xa4>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	68e5      	ldr	r5, [r4, #12]
 80046d6:	6832      	ldr	r2, [r6, #0]
 80046d8:	f003 0306 	and.w	r3, r3, #6
 80046dc:	2b04      	cmp	r3, #4
 80046de:	bf08      	it	eq
 80046e0:	1aad      	subeq	r5, r5, r2
 80046e2:	68a3      	ldr	r3, [r4, #8]
 80046e4:	6922      	ldr	r2, [r4, #16]
 80046e6:	bf0c      	ite	eq
 80046e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046ec:	2500      	movne	r5, #0
 80046ee:	4293      	cmp	r3, r2
 80046f0:	bfc4      	itt	gt
 80046f2:	1a9b      	subgt	r3, r3, r2
 80046f4:	18ed      	addgt	r5, r5, r3
 80046f6:	2600      	movs	r6, #0
 80046f8:	341a      	adds	r4, #26
 80046fa:	42b5      	cmp	r5, r6
 80046fc:	d11a      	bne.n	8004734 <_printf_common+0xc8>
 80046fe:	2000      	movs	r0, #0
 8004700:	e008      	b.n	8004714 <_printf_common+0xa8>
 8004702:	2301      	movs	r3, #1
 8004704:	4652      	mov	r2, sl
 8004706:	4649      	mov	r1, r9
 8004708:	4638      	mov	r0, r7
 800470a:	47c0      	blx	r8
 800470c:	3001      	adds	r0, #1
 800470e:	d103      	bne.n	8004718 <_printf_common+0xac>
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004718:	3501      	adds	r5, #1
 800471a:	e7c6      	b.n	80046aa <_printf_common+0x3e>
 800471c:	18e1      	adds	r1, r4, r3
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	2030      	movs	r0, #48	; 0x30
 8004722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004726:	4422      	add	r2, r4
 8004728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800472c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004730:	3302      	adds	r3, #2
 8004732:	e7c7      	b.n	80046c4 <_printf_common+0x58>
 8004734:	2301      	movs	r3, #1
 8004736:	4622      	mov	r2, r4
 8004738:	4649      	mov	r1, r9
 800473a:	4638      	mov	r0, r7
 800473c:	47c0      	blx	r8
 800473e:	3001      	adds	r0, #1
 8004740:	d0e6      	beq.n	8004710 <_printf_common+0xa4>
 8004742:	3601      	adds	r6, #1
 8004744:	e7d9      	b.n	80046fa <_printf_common+0x8e>
	...

08004748 <_printf_i>:
 8004748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800474c:	7e0f      	ldrb	r7, [r1, #24]
 800474e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004750:	2f78      	cmp	r7, #120	; 0x78
 8004752:	4691      	mov	r9, r2
 8004754:	4680      	mov	r8, r0
 8004756:	460c      	mov	r4, r1
 8004758:	469a      	mov	sl, r3
 800475a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800475e:	d807      	bhi.n	8004770 <_printf_i+0x28>
 8004760:	2f62      	cmp	r7, #98	; 0x62
 8004762:	d80a      	bhi.n	800477a <_printf_i+0x32>
 8004764:	2f00      	cmp	r7, #0
 8004766:	f000 80d8 	beq.w	800491a <_printf_i+0x1d2>
 800476a:	2f58      	cmp	r7, #88	; 0x58
 800476c:	f000 80a3 	beq.w	80048b6 <_printf_i+0x16e>
 8004770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004778:	e03a      	b.n	80047f0 <_printf_i+0xa8>
 800477a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800477e:	2b15      	cmp	r3, #21
 8004780:	d8f6      	bhi.n	8004770 <_printf_i+0x28>
 8004782:	a101      	add	r1, pc, #4	; (adr r1, 8004788 <_printf_i+0x40>)
 8004784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004788:	080047e1 	.word	0x080047e1
 800478c:	080047f5 	.word	0x080047f5
 8004790:	08004771 	.word	0x08004771
 8004794:	08004771 	.word	0x08004771
 8004798:	08004771 	.word	0x08004771
 800479c:	08004771 	.word	0x08004771
 80047a0:	080047f5 	.word	0x080047f5
 80047a4:	08004771 	.word	0x08004771
 80047a8:	08004771 	.word	0x08004771
 80047ac:	08004771 	.word	0x08004771
 80047b0:	08004771 	.word	0x08004771
 80047b4:	08004901 	.word	0x08004901
 80047b8:	08004825 	.word	0x08004825
 80047bc:	080048e3 	.word	0x080048e3
 80047c0:	08004771 	.word	0x08004771
 80047c4:	08004771 	.word	0x08004771
 80047c8:	08004923 	.word	0x08004923
 80047cc:	08004771 	.word	0x08004771
 80047d0:	08004825 	.word	0x08004825
 80047d4:	08004771 	.word	0x08004771
 80047d8:	08004771 	.word	0x08004771
 80047dc:	080048eb 	.word	0x080048eb
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	602a      	str	r2, [r5, #0]
 80047e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0a3      	b.n	800493c <_printf_i+0x1f4>
 80047f4:	6820      	ldr	r0, [r4, #0]
 80047f6:	6829      	ldr	r1, [r5, #0]
 80047f8:	0606      	lsls	r6, r0, #24
 80047fa:	f101 0304 	add.w	r3, r1, #4
 80047fe:	d50a      	bpl.n	8004816 <_printf_i+0xce>
 8004800:	680e      	ldr	r6, [r1, #0]
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	2e00      	cmp	r6, #0
 8004806:	da03      	bge.n	8004810 <_printf_i+0xc8>
 8004808:	232d      	movs	r3, #45	; 0x2d
 800480a:	4276      	negs	r6, r6
 800480c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004810:	485e      	ldr	r0, [pc, #376]	; (800498c <_printf_i+0x244>)
 8004812:	230a      	movs	r3, #10
 8004814:	e019      	b.n	800484a <_printf_i+0x102>
 8004816:	680e      	ldr	r6, [r1, #0]
 8004818:	602b      	str	r3, [r5, #0]
 800481a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800481e:	bf18      	it	ne
 8004820:	b236      	sxthne	r6, r6
 8004822:	e7ef      	b.n	8004804 <_printf_i+0xbc>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	6820      	ldr	r0, [r4, #0]
 8004828:	1d19      	adds	r1, r3, #4
 800482a:	6029      	str	r1, [r5, #0]
 800482c:	0601      	lsls	r1, r0, #24
 800482e:	d501      	bpl.n	8004834 <_printf_i+0xec>
 8004830:	681e      	ldr	r6, [r3, #0]
 8004832:	e002      	b.n	800483a <_printf_i+0xf2>
 8004834:	0646      	lsls	r6, r0, #25
 8004836:	d5fb      	bpl.n	8004830 <_printf_i+0xe8>
 8004838:	881e      	ldrh	r6, [r3, #0]
 800483a:	4854      	ldr	r0, [pc, #336]	; (800498c <_printf_i+0x244>)
 800483c:	2f6f      	cmp	r7, #111	; 0x6f
 800483e:	bf0c      	ite	eq
 8004840:	2308      	moveq	r3, #8
 8004842:	230a      	movne	r3, #10
 8004844:	2100      	movs	r1, #0
 8004846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800484a:	6865      	ldr	r5, [r4, #4]
 800484c:	60a5      	str	r5, [r4, #8]
 800484e:	2d00      	cmp	r5, #0
 8004850:	bfa2      	ittt	ge
 8004852:	6821      	ldrge	r1, [r4, #0]
 8004854:	f021 0104 	bicge.w	r1, r1, #4
 8004858:	6021      	strge	r1, [r4, #0]
 800485a:	b90e      	cbnz	r6, 8004860 <_printf_i+0x118>
 800485c:	2d00      	cmp	r5, #0
 800485e:	d04d      	beq.n	80048fc <_printf_i+0x1b4>
 8004860:	4615      	mov	r5, r2
 8004862:	fbb6 f1f3 	udiv	r1, r6, r3
 8004866:	fb03 6711 	mls	r7, r3, r1, r6
 800486a:	5dc7      	ldrb	r7, [r0, r7]
 800486c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004870:	4637      	mov	r7, r6
 8004872:	42bb      	cmp	r3, r7
 8004874:	460e      	mov	r6, r1
 8004876:	d9f4      	bls.n	8004862 <_printf_i+0x11a>
 8004878:	2b08      	cmp	r3, #8
 800487a:	d10b      	bne.n	8004894 <_printf_i+0x14c>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	07de      	lsls	r6, r3, #31
 8004880:	d508      	bpl.n	8004894 <_printf_i+0x14c>
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	6861      	ldr	r1, [r4, #4]
 8004886:	4299      	cmp	r1, r3
 8004888:	bfde      	ittt	le
 800488a:	2330      	movle	r3, #48	; 0x30
 800488c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004890:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004894:	1b52      	subs	r2, r2, r5
 8004896:	6122      	str	r2, [r4, #16]
 8004898:	f8cd a000 	str.w	sl, [sp]
 800489c:	464b      	mov	r3, r9
 800489e:	aa03      	add	r2, sp, #12
 80048a0:	4621      	mov	r1, r4
 80048a2:	4640      	mov	r0, r8
 80048a4:	f7ff fee2 	bl	800466c <_printf_common>
 80048a8:	3001      	adds	r0, #1
 80048aa:	d14c      	bne.n	8004946 <_printf_i+0x1fe>
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	b004      	add	sp, #16
 80048b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b6:	4835      	ldr	r0, [pc, #212]	; (800498c <_printf_i+0x244>)
 80048b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048bc:	6829      	ldr	r1, [r5, #0]
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80048c4:	6029      	str	r1, [r5, #0]
 80048c6:	061d      	lsls	r5, r3, #24
 80048c8:	d514      	bpl.n	80048f4 <_printf_i+0x1ac>
 80048ca:	07df      	lsls	r7, r3, #31
 80048cc:	bf44      	itt	mi
 80048ce:	f043 0320 	orrmi.w	r3, r3, #32
 80048d2:	6023      	strmi	r3, [r4, #0]
 80048d4:	b91e      	cbnz	r6, 80048de <_printf_i+0x196>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	f023 0320 	bic.w	r3, r3, #32
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	2310      	movs	r3, #16
 80048e0:	e7b0      	b.n	8004844 <_printf_i+0xfc>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	f043 0320 	orr.w	r3, r3, #32
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	2378      	movs	r3, #120	; 0x78
 80048ec:	4828      	ldr	r0, [pc, #160]	; (8004990 <_printf_i+0x248>)
 80048ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048f2:	e7e3      	b.n	80048bc <_printf_i+0x174>
 80048f4:	0659      	lsls	r1, r3, #25
 80048f6:	bf48      	it	mi
 80048f8:	b2b6      	uxthmi	r6, r6
 80048fa:	e7e6      	b.n	80048ca <_printf_i+0x182>
 80048fc:	4615      	mov	r5, r2
 80048fe:	e7bb      	b.n	8004878 <_printf_i+0x130>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	6826      	ldr	r6, [r4, #0]
 8004904:	6961      	ldr	r1, [r4, #20]
 8004906:	1d18      	adds	r0, r3, #4
 8004908:	6028      	str	r0, [r5, #0]
 800490a:	0635      	lsls	r5, r6, #24
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	d501      	bpl.n	8004914 <_printf_i+0x1cc>
 8004910:	6019      	str	r1, [r3, #0]
 8004912:	e002      	b.n	800491a <_printf_i+0x1d2>
 8004914:	0670      	lsls	r0, r6, #25
 8004916:	d5fb      	bpl.n	8004910 <_printf_i+0x1c8>
 8004918:	8019      	strh	r1, [r3, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	4615      	mov	r5, r2
 8004920:	e7ba      	b.n	8004898 <_printf_i+0x150>
 8004922:	682b      	ldr	r3, [r5, #0]
 8004924:	1d1a      	adds	r2, r3, #4
 8004926:	602a      	str	r2, [r5, #0]
 8004928:	681d      	ldr	r5, [r3, #0]
 800492a:	6862      	ldr	r2, [r4, #4]
 800492c:	2100      	movs	r1, #0
 800492e:	4628      	mov	r0, r5
 8004930:	f7fb fc56 	bl	80001e0 <memchr>
 8004934:	b108      	cbz	r0, 800493a <_printf_i+0x1f2>
 8004936:	1b40      	subs	r0, r0, r5
 8004938:	6060      	str	r0, [r4, #4]
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	2300      	movs	r3, #0
 8004940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004944:	e7a8      	b.n	8004898 <_printf_i+0x150>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	462a      	mov	r2, r5
 800494a:	4649      	mov	r1, r9
 800494c:	4640      	mov	r0, r8
 800494e:	47d0      	blx	sl
 8004950:	3001      	adds	r0, #1
 8004952:	d0ab      	beq.n	80048ac <_printf_i+0x164>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	079b      	lsls	r3, r3, #30
 8004958:	d413      	bmi.n	8004982 <_printf_i+0x23a>
 800495a:	68e0      	ldr	r0, [r4, #12]
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	4298      	cmp	r0, r3
 8004960:	bfb8      	it	lt
 8004962:	4618      	movlt	r0, r3
 8004964:	e7a4      	b.n	80048b0 <_printf_i+0x168>
 8004966:	2301      	movs	r3, #1
 8004968:	4632      	mov	r2, r6
 800496a:	4649      	mov	r1, r9
 800496c:	4640      	mov	r0, r8
 800496e:	47d0      	blx	sl
 8004970:	3001      	adds	r0, #1
 8004972:	d09b      	beq.n	80048ac <_printf_i+0x164>
 8004974:	3501      	adds	r5, #1
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	9903      	ldr	r1, [sp, #12]
 800497a:	1a5b      	subs	r3, r3, r1
 800497c:	42ab      	cmp	r3, r5
 800497e:	dcf2      	bgt.n	8004966 <_printf_i+0x21e>
 8004980:	e7eb      	b.n	800495a <_printf_i+0x212>
 8004982:	2500      	movs	r5, #0
 8004984:	f104 0619 	add.w	r6, r4, #25
 8004988:	e7f5      	b.n	8004976 <_printf_i+0x22e>
 800498a:	bf00      	nop
 800498c:	08004c4d 	.word	0x08004c4d
 8004990:	08004c5e 	.word	0x08004c5e

08004994 <__sread>:
 8004994:	b510      	push	{r4, lr}
 8004996:	460c      	mov	r4, r1
 8004998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499c:	f000 f894 	bl	8004ac8 <_read_r>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	bfab      	itete	ge
 80049a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049a6:	89a3      	ldrhlt	r3, [r4, #12]
 80049a8:	181b      	addge	r3, r3, r0
 80049aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049ae:	bfac      	ite	ge
 80049b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80049b2:	81a3      	strhlt	r3, [r4, #12]
 80049b4:	bd10      	pop	{r4, pc}

080049b6 <__swrite>:
 80049b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ba:	461f      	mov	r7, r3
 80049bc:	898b      	ldrh	r3, [r1, #12]
 80049be:	05db      	lsls	r3, r3, #23
 80049c0:	4605      	mov	r5, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	4616      	mov	r6, r2
 80049c6:	d505      	bpl.n	80049d4 <__swrite+0x1e>
 80049c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049cc:	2302      	movs	r3, #2
 80049ce:	2200      	movs	r2, #0
 80049d0:	f000 f868 	bl	8004aa4 <_lseek_r>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	4632      	mov	r2, r6
 80049e2:	463b      	mov	r3, r7
 80049e4:	4628      	mov	r0, r5
 80049e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ea:	f000 b817 	b.w	8004a1c <_write_r>

080049ee <__sseek>:
 80049ee:	b510      	push	{r4, lr}
 80049f0:	460c      	mov	r4, r1
 80049f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f6:	f000 f855 	bl	8004aa4 <_lseek_r>
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	bf15      	itete	ne
 8004a00:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a0a:	81a3      	strheq	r3, [r4, #12]
 8004a0c:	bf18      	it	ne
 8004a0e:	81a3      	strhne	r3, [r4, #12]
 8004a10:	bd10      	pop	{r4, pc}

08004a12 <__sclose>:
 8004a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a16:	f000 b813 	b.w	8004a40 <_close_r>
	...

08004a1c <_write_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4d07      	ldr	r5, [pc, #28]	; (8004a3c <_write_r+0x20>)
 8004a20:	4604      	mov	r4, r0
 8004a22:	4608      	mov	r0, r1
 8004a24:	4611      	mov	r1, r2
 8004a26:	2200      	movs	r2, #0
 8004a28:	602a      	str	r2, [r5, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f7fb fcaa 	bl	8000384 <_write>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_write_r+0x1e>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_write_r+0x1e>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	20000158 	.word	0x20000158

08004a40 <_close_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4d06      	ldr	r5, [pc, #24]	; (8004a5c <_close_r+0x1c>)
 8004a44:	2300      	movs	r3, #0
 8004a46:	4604      	mov	r4, r0
 8004a48:	4608      	mov	r0, r1
 8004a4a:	602b      	str	r3, [r5, #0]
 8004a4c:	f7fb fffb 	bl	8000a46 <_close>
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	d102      	bne.n	8004a5a <_close_r+0x1a>
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	b103      	cbz	r3, 8004a5a <_close_r+0x1a>
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	bd38      	pop	{r3, r4, r5, pc}
 8004a5c:	20000158 	.word	0x20000158

08004a60 <_fstat_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4d07      	ldr	r5, [pc, #28]	; (8004a80 <_fstat_r+0x20>)
 8004a64:	2300      	movs	r3, #0
 8004a66:	4604      	mov	r4, r0
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	602b      	str	r3, [r5, #0]
 8004a6e:	f7fb fff6 	bl	8000a5e <_fstat>
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	d102      	bne.n	8004a7c <_fstat_r+0x1c>
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	b103      	cbz	r3, 8004a7c <_fstat_r+0x1c>
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	bd38      	pop	{r3, r4, r5, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000158 	.word	0x20000158

08004a84 <_isatty_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4d06      	ldr	r5, [pc, #24]	; (8004aa0 <_isatty_r+0x1c>)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	602b      	str	r3, [r5, #0]
 8004a90:	f7fb fff5 	bl	8000a7e <_isatty>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d102      	bne.n	8004a9e <_isatty_r+0x1a>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	b103      	cbz	r3, 8004a9e <_isatty_r+0x1a>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
 8004aa0:	20000158 	.word	0x20000158

08004aa4 <_lseek_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	4d07      	ldr	r5, [pc, #28]	; (8004ac4 <_lseek_r+0x20>)
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	4608      	mov	r0, r1
 8004aac:	4611      	mov	r1, r2
 8004aae:	2200      	movs	r2, #0
 8004ab0:	602a      	str	r2, [r5, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f7fb ffee 	bl	8000a94 <_lseek>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_lseek_r+0x1e>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_lseek_r+0x1e>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	20000158 	.word	0x20000158

08004ac8 <_read_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4d07      	ldr	r5, [pc, #28]	; (8004ae8 <_read_r+0x20>)
 8004acc:	4604      	mov	r4, r0
 8004ace:	4608      	mov	r0, r1
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	602a      	str	r2, [r5, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f7fb ff98 	bl	8000a0c <_read>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_read_r+0x1e>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_read_r+0x1e>
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	20000158 	.word	0x20000158

08004aec <_init>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr

08004af8 <_fini>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	bf00      	nop
 8004afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afe:	bc08      	pop	{r3}
 8004b00:	469e      	mov	lr, r3
 8004b02:	4770      	bx	lr
